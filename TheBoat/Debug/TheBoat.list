
TheBoat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002810  08002810  00012810  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          0000012c  20000010  20000010  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000013c  2000013c  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010b79  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fc9  00000000  00000000  00030bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005d3a  00000000  00000000  00032b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000760  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b78  00000000  00000000  00039018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000422e  00000000  00000000  00039b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003356  00000000  00000000  0003ddbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00041114  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001628  00000000  00000000  00041190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080027f8 	.word	0x080027f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080027f8 	.word	0x080027f8

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f092 0f00 	teq	r2, #0
 80004be:	bf14      	ite	ne
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e720      	b.n	8000318 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aedc 	beq.w	80002c6 <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6c1      	b.n	80002c6 <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_InitTick+0x3c>)
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_InitTick+0x40>)
{
 800096e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	7818      	ldrb	r0, [r3, #0]
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f0 	udiv	r3, r3, r0
 800097a:	6810      	ldr	r0, [r2, #0]
 800097c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000980:	f000 f8a0 	bl	8000ac4 <HAL_SYSTICK_Config>
 8000984:	4604      	mov	r4, r0
 8000986:	b958      	cbnz	r0, 80009a0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000988:	2d0f      	cmp	r5, #15
 800098a:	d809      	bhi.n	80009a0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	4602      	mov	r2, r0
 800098e:	4629      	mov	r1, r5
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f856 	bl	8000a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_InitTick+0x44>)
 800099a:	4620      	mov	r0, r4
 800099c:	601d      	str	r5, [r3, #0]
 800099e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009a0:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80009a2:	bd38      	pop	{r3, r4, r5, pc}
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x20>)
{
 80009b2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	6813      	ldr	r3, [r2, #0]
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f82f 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff ffd0 	bl	8000968 <HAL_InitTick>
  HAL_MspInit();
 80009c8:	f001 fdae 	bl	8002528 <HAL_MspInit>
}
 80009cc:	2000      	movs	r0, #0
 80009ce:	bd08      	pop	{r3, pc}
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <HAL_IncTick+0x10>)
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_IncTick+0x14>)
 80009d8:	6811      	ldr	r1, [r2, #0]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	440b      	add	r3, r1
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000038 	.word	0x20000038
 80009e8:	20000000 	.word	0x20000000

080009ec <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80009ec:	4b01      	ldr	r3, [pc, #4]	; (80009f4 <HAL_GetTick+0x8>)
 80009ee:	6818      	ldr	r0, [r3, #0]
}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000038 	.word	0x20000038

080009f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b538      	push	{r3, r4, r5, lr}
 80009fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff fff6 	bl	80009ec <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a00:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	bf1c      	itt	ne
 8000a04:	4b05      	ldrne	r3, [pc, #20]	; (8000a1c <HAL_Delay+0x24>)
 8000a06:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	bf18      	it	ne
 8000a0c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a0e:	f7ff ffed 	bl	80009ec <HAL_GetTick>
 8000a12:	1b40      	subs	r0, r0, r5
 8000a14:	4284      	cmp	r4, r0
 8000a16:	d8fa      	bhi.n	8000a0e <HAL_Delay+0x16>
  {
  }
}
 8000a18:	bd38      	pop	{r3, r4, r5, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000000 	.word	0x20000000

08000a20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	0c1b      	lsrs	r3, r3, #16
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a30:	0200      	lsls	r0, r0, #8
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a3a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a3c:	60d3      	str	r3, [r2, #12]
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a46:	b530      	push	{r4, r5, lr}
 8000a48:	68dc      	ldr	r4, [r3, #12]
 8000a4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	bf28      	it	cs
 8000a58:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 0501 	mov.w	r5, #1
 8000a60:	fa05 f303 	lsl.w	r3, r5, r3
 8000a64:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a68:	bf8c      	ite	hi
 8000a6a:	3c03      	subhi	r4, #3
 8000a6c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6e:	4019      	ands	r1, r3
 8000a70:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a72:	fa05 f404 	lsl.w	r4, r5, r4
 8000a76:	3c01      	subs	r4, #1
 8000a78:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000a7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	ea42 0201 	orr.w	r2, r2, r1
 8000a80:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	bfaf      	iteee	ge
 8000a86:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	f000 000f 	andlt.w	r0, r0, #15
 8000a8e:	4b06      	ldrlt	r3, [pc, #24]	; (8000aa8 <HAL_NVIC_SetPriority+0x64>)
 8000a90:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	bfa5      	ittet	ge
 8000a94:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000a98:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000aa0:	bd30      	pop	{r4, r5, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00
 8000aa8:	e000ed14 	.word	0xe000ed14

08000aac <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000aac:	0942      	lsrs	r2, r0, #5
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f000 001f 	and.w	r0, r0, #31
 8000ab4:	fa03 f000 	lsl.w	r0, r3, r0
 8000ab8:	4b01      	ldr	r3, [pc, #4]	; (8000ac0 <HAL_NVIC_EnableIRQ+0x14>)
 8000aba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aca:	d20a      	bcs.n	8000ae2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	21f0      	movs	r1, #240	; 0xf0
 8000ad4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000af2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000af4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000af6:	bf0c      	ite	eq
 8000af8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000afc:	f022 0204 	bicne.w	r2, r2, #4
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	4770      	bx	lr
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b08:	4770      	bx	lr

08000b0a <HAL_SYSTICK_IRQHandler>:
{
 8000b0a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b0c:	f7ff fffc 	bl	8000b08 <HAL_SYSTICK_Callback>
 8000b10:	bd08      	pop	{r3, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b18:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000cb0 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b20:	4a61      	ldr	r2, [pc, #388]	; (8000ca8 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000b22:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b24:	fa38 f403 	lsrs.w	r4, r8, r3
 8000b28:	d102      	bne.n	8000b30 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000b2a:	b003      	add	sp, #12
 8000b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b30:	f04f 0e01 	mov.w	lr, #1
 8000b34:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000b38:	ea18 060e 	ands.w	r6, r8, lr
 8000b3c:	f000 80a6 	beq.w	8000c8c <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b40:	684c      	ldr	r4, [r1, #4]
 8000b42:	f024 0710 	bic.w	r7, r4, #16
 8000b46:	2f02      	cmp	r7, #2
 8000b48:	d116      	bne.n	8000b78 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000b4a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b4e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b52:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000b56:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b5a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b5e:	f04f 0c0f 	mov.w	ip, #15
 8000b62:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b66:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b6a:	690d      	ldr	r5, [r1, #16]
 8000b6c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b70:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b74:	f8ca 5020 	str.w	r5, [sl, #32]
 8000b78:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b7c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000b7e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b82:	fa05 f50a 	lsl.w	r5, r5, sl
 8000b86:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b88:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b8c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b90:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b94:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b96:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b9a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000b9c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba0:	d811      	bhi.n	8000bc6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000ba2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba4:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba8:	68cf      	ldr	r7, [r1, #12]
 8000baa:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bae:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000bb2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bb4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bba:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000bbe:	409f      	lsls	r7, r3
 8000bc0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bc4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bc6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bca:	688f      	ldr	r7, [r1, #8]
 8000bcc:	fa07 f70a 	lsl.w	r7, r7, sl
 8000bd0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000bd2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd4:	00e5      	lsls	r5, r4, #3
 8000bd6:	d559      	bpl.n	8000c8c <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000bdc:	f045 0501 	orr.w	r5, r5, #1
 8000be0:	f8c9 5018 	str.w	r5, [r9, #24]
 8000be4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000be8:	f023 0703 	bic.w	r7, r3, #3
 8000bec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bf0:	f005 0501 	and.w	r5, r5, #1
 8000bf4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000bf8:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000bfa:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c00:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c02:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c06:	f04f 0e0f 	mov.w	lr, #15
 8000c0a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c0e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c12:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c16:	d03b      	beq.n	8000c90 <HAL_GPIO_Init+0x17c>
 8000c18:	4d24      	ldr	r5, [pc, #144]	; (8000cac <HAL_GPIO_Init+0x198>)
 8000c1a:	42a8      	cmp	r0, r5
 8000c1c:	d03a      	beq.n	8000c94 <HAL_GPIO_Init+0x180>
 8000c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c22:	42a8      	cmp	r0, r5
 8000c24:	d038      	beq.n	8000c98 <HAL_GPIO_Init+0x184>
 8000c26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c2a:	42a8      	cmp	r0, r5
 8000c2c:	d036      	beq.n	8000c9c <HAL_GPIO_Init+0x188>
 8000c2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c32:	42a8      	cmp	r0, r5
 8000c34:	d034      	beq.n	8000ca0 <HAL_GPIO_Init+0x18c>
 8000c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c3a:	42a8      	cmp	r0, r5
 8000c3c:	d032      	beq.n	8000ca4 <HAL_GPIO_Init+0x190>
 8000c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c42:	42a8      	cmp	r0, r5
 8000c44:	bf14      	ite	ne
 8000c46:	2507      	movne	r5, #7
 8000c48:	2506      	moveq	r5, #6
 8000c4a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c4e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c52:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000c54:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c56:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c5c:	bf0c      	ite	eq
 8000c5e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000c60:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000c62:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000c64:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c66:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c6a:	bf0c      	ite	eq
 8000c6c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000c6e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000c70:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c72:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c74:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c78:	bf0c      	ite	eq
 8000c7a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000c7c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000c7e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000c80:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c82:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c84:	bf54      	ite	pl
 8000c86:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000c88:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000c8a:	60d5      	str	r5, [r2, #12]
    position++;
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	e749      	b.n	8000b24 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c90:	2500      	movs	r5, #0
 8000c92:	e7da      	b.n	8000c4a <HAL_GPIO_Init+0x136>
 8000c94:	2501      	movs	r5, #1
 8000c96:	e7d8      	b.n	8000c4a <HAL_GPIO_Init+0x136>
 8000c98:	2502      	movs	r5, #2
 8000c9a:	e7d6      	b.n	8000c4a <HAL_GPIO_Init+0x136>
 8000c9c:	2503      	movs	r5, #3
 8000c9e:	e7d4      	b.n	8000c4a <HAL_GPIO_Init+0x136>
 8000ca0:	2504      	movs	r5, #4
 8000ca2:	e7d2      	b.n	8000c4a <HAL_GPIO_Init+0x136>
 8000ca4:	2505      	movs	r5, #5
 8000ca6:	e7d0      	b.n	8000c4a <HAL_GPIO_Init+0x136>
 8000ca8:	40010400 	.word	0x40010400
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cb4:	6903      	ldr	r3, [r0, #16]
 8000cb6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000cb8:	bf14      	ite	ne
 8000cba:	2001      	movne	r0, #1
 8000cbc:	2000      	moveq	r0, #0
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc0:	b10a      	cbz	r2, 8000cc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc2:	6181      	str	r1, [r0, #24]
 8000cc4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc6:	6281      	str	r1, [r0, #40]	; 0x28
 8000cc8:	4770      	bx	lr
	...

08000ccc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ccc:	6803      	ldr	r3, [r0, #0]
{
 8000cce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	07df      	lsls	r7, r3, #31
{
 8000cd4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	d411      	bmi.n	8000cfc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd8:	682b      	ldr	r3, [r5, #0]
 8000cda:	079e      	lsls	r6, r3, #30
 8000cdc:	f100 808b 	bmi.w	8000df6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	071c      	lsls	r4, r3, #28
 8000ce4:	f100 80fe 	bmi.w	8000ee4 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	0758      	lsls	r0, r3, #29
 8000cec:	f100 8147 	bmi.w	8000f7e <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf0:	69aa      	ldr	r2, [r5, #24]
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	f040 81dd 	bne.w	80010b2 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	e024      	b.n	8000d46 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cfc:	4cbd      	ldr	r4, [pc, #756]	; (8000ff4 <HAL_RCC_OscConfig+0x328>)
 8000cfe:	6863      	ldr	r3, [r4, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d00a      	beq.n	8000d1e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d08:	6863      	ldr	r3, [r4, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d11c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x80>
 8000d12:	6863      	ldr	r3, [r4, #4]
 8000d14:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1c:	d116      	bne.n	8000d4c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d22:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d26:	6821      	ldr	r1, [r4, #0]
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	fab3 f383 	clz	r3, r3
 8000d30:	f003 031f 	and.w	r3, r3, #31
 8000d34:	2201      	movs	r2, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	420b      	tst	r3, r1
 8000d3c:	d0cc      	beq.n	8000cd8 <HAL_RCC_OscConfig+0xc>
 8000d3e:	686b      	ldr	r3, [r5, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1c9      	bne.n	8000cd8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d44:	2001      	movs	r0, #1
}
 8000d46:	b002      	add	sp, #8
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4c:	686b      	ldr	r3, [r5, #4]
 8000d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d52:	d11e      	bne.n	8000d92 <HAL_RCC_OscConfig+0xc6>
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fe46 	bl	80009ec <HAL_GetTick>
 8000d60:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d64:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	2701      	movs	r7, #1
 8000d68:	fa96 f3a6 	rbit	r3, r6
 8000d6c:	6822      	ldr	r2, [r4, #0]
 8000d6e:	fa96 f3a6 	rbit	r3, r6
 8000d72:	fab3 f383 	clz	r3, r3
 8000d76:	f003 031f 	and.w	r3, r3, #31
 8000d7a:	fa07 f303 	lsl.w	r3, r7, r3
 8000d7e:	4213      	tst	r3, r2
 8000d80:	d1aa      	bne.n	8000cd8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fe33 	bl	80009ec <HAL_GetTick>
 8000d86:	eba0 0008 	sub.w	r0, r0, r8
 8000d8a:	2864      	cmp	r0, #100	; 0x64
 8000d8c:	d9ec      	bls.n	8000d68 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8000d8e:	2003      	movs	r0, #3
 8000d90:	e7d9      	b.n	8000d46 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d92:	bb0b      	cbnz	r3, 8000dd8 <HAL_RCC_OscConfig+0x10c>
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6023      	str	r3, [r4, #0]
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000da4:	f7ff fe22 	bl	80009ec <HAL_GetTick>
 8000da8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000dac:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dae:	2701      	movs	r7, #1
 8000db0:	fa96 f3a6 	rbit	r3, r6
 8000db4:	6822      	ldr	r2, [r4, #0]
 8000db6:	fa96 f3a6 	rbit	r3, r6
 8000dba:	fab3 f383 	clz	r3, r3
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	fa07 f303 	lsl.w	r3, r7, r3
 8000dc6:	4213      	tst	r3, r2
 8000dc8:	d086      	beq.n	8000cd8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dca:	f7ff fe0f 	bl	80009ec <HAL_GetTick>
 8000dce:	eba0 0008 	sub.w	r0, r0, r8
 8000dd2:	2864      	cmp	r0, #100	; 0x64
 8000dd4:	d9ec      	bls.n	8000db0 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e7da      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	d103      	bne.n	8000de8 <HAL_RCC_OscConfig+0x11c>
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	e7b5      	b.n	8000d54 <HAL_RCC_OscConfig+0x88>
 8000de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dec:	6023      	str	r3, [r4, #0]
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	e7b1      	b.n	8000d5a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df6:	4c7f      	ldr	r4, [pc, #508]	; (8000ff4 <HAL_RCC_OscConfig+0x328>)
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	f013 0f0c 	tst.w	r3, #12
 8000dfe:	d00a      	beq.n	8000e16 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d124      	bne.n	8000e54 <HAL_RCC_OscConfig+0x188>
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e14:	d11e      	bne.n	8000e54 <HAL_RCC_OscConfig+0x188>
 8000e16:	2302      	movs	r3, #2
 8000e18:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1c:	6821      	ldr	r1, [r4, #0]
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	fab3 f383 	clz	r3, r3
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	420b      	tst	r3, r1
 8000e32:	d002      	beq.n	8000e3a <HAL_RCC_OscConfig+0x16e>
 8000e34:	68eb      	ldr	r3, [r5, #12]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d184      	bne.n	8000d44 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	6821      	ldr	r1, [r4, #0]
 8000e3c:	23f8      	movs	r3, #248	; 0xf8
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	fab3 f283 	clz	r2, r3
 8000e46:	692b      	ldr	r3, [r5, #16]
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	e745      	b.n	8000ce0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e54:	68ea      	ldr	r2, [r5, #12]
 8000e56:	2601      	movs	r6, #1
 8000e58:	b30a      	cbz	r2, 8000e9e <HAL_RCC_OscConfig+0x1d2>
 8000e5a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	2702      	movs	r7, #2
 8000e6e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000e70:	f7ff fdbc 	bl	80009ec <HAL_GetTick>
 8000e74:	4680      	mov	r8, r0
 8000e76:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7a:	6822      	ldr	r2, [r4, #0]
 8000e7c:	fa97 f3a7 	rbit	r3, r7
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	fa06 f303 	lsl.w	r3, r6, r3
 8000e8c:	4213      	tst	r3, r2
 8000e8e:	d1d4      	bne.n	8000e3a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e90:	f7ff fdac 	bl	80009ec <HAL_GetTick>
 8000e94:	eba0 0008 	sub.w	r0, r0, r8
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d9ec      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1aa>
 8000e9c:	e777      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
 8000e9e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000ea2:	fab3 f383 	clz	r3, r3
 8000ea6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eaa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	2702      	movs	r7, #2
 8000eb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fd9a 	bl	80009ec <HAL_GetTick>
 8000eb8:	4680      	mov	r8, r0
 8000eba:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ebe:	6822      	ldr	r2, [r4, #0]
 8000ec0:	fa97 f3a7 	rbit	r3, r7
 8000ec4:	fab3 f383 	clz	r3, r3
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	fa06 f303 	lsl.w	r3, r6, r3
 8000ed0:	4213      	tst	r3, r2
 8000ed2:	f43f af05 	beq.w	8000ce0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fd89 	bl	80009ec <HAL_GetTick>
 8000eda:	eba0 0008 	sub.w	r0, r0, r8
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9eb      	bls.n	8000eba <HAL_RCC_OscConfig+0x1ee>
 8000ee2:	e754      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee4:	696a      	ldr	r2, [r5, #20]
 8000ee6:	4e43      	ldr	r6, [pc, #268]	; (8000ff4 <HAL_RCC_OscConfig+0x328>)
 8000ee8:	4943      	ldr	r1, [pc, #268]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000eea:	2401      	movs	r4, #1
 8000eec:	b31a      	cbz	r2, 8000f36 <HAL_RCC_OscConfig+0x26a>
 8000eee:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	2702      	movs	r7, #2
 8000efc:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000efe:	f7ff fd75 	bl	80009ec <HAL_GetTick>
 8000f02:	4680      	mov	r8, r0
 8000f04:	fa97 f3a7 	rbit	r3, r7
 8000f08:	fa97 f3a7 	rbit	r3, r7
 8000f0c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000f12:	fa97 f3a7 	rbit	r3, r7
 8000f16:	fab3 f383 	clz	r3, r3
 8000f1a:	f003 031f 	and.w	r3, r3, #31
 8000f1e:	fa04 f303 	lsl.w	r3, r4, r3
 8000f22:	4213      	tst	r3, r2
 8000f24:	f47f aee0 	bne.w	8000ce8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fd60 	bl	80009ec <HAL_GetTick>
 8000f2c:	eba0 0008 	sub.w	r0, r0, r8
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d9e7      	bls.n	8000f04 <HAL_RCC_OscConfig+0x238>
 8000f34:	e72b      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
 8000f36:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	440b      	add	r3, r1
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	2702      	movs	r7, #2
 8000f44:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f46:	f7ff fd51 	bl	80009ec <HAL_GetTick>
 8000f4a:	4680      	mov	r8, r0
 8000f4c:	fa97 f3a7 	rbit	r3, r7
 8000f50:	fa97 f3a7 	rbit	r3, r7
 8000f54:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f58:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000f5a:	fa97 f3a7 	rbit	r3, r7
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	fa04 f303 	lsl.w	r3, r4, r3
 8000f6a:	4213      	tst	r3, r2
 8000f6c:	f43f aebc 	beq.w	8000ce8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fd3c 	bl	80009ec <HAL_GetTick>
 8000f74:	eba0 0008 	sub.w	r0, r0, r8
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d9e7      	bls.n	8000f4c <HAL_RCC_OscConfig+0x280>
 8000f7c:	e707      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4c1d      	ldr	r4, [pc, #116]	; (8000ff4 <HAL_RCC_OscConfig+0x328>)
 8000f80:	69e3      	ldr	r3, [r4, #28]
 8000f82:	00d9      	lsls	r1, r3, #3
 8000f84:	d434      	bmi.n	8000ff0 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	69e3      	ldr	r3, [r4, #28]
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	61e3      	str	r3, [r4, #28]
 8000f8e:	69e3      	ldr	r3, [r4, #28]
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f98:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9a:	4f18      	ldr	r7, [pc, #96]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	05da      	lsls	r2, r3, #23
 8000fa0:	d52e      	bpl.n	8001000 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa2:	68ab      	ldr	r3, [r5, #8]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d13c      	bne.n	8001022 <HAL_RCC_OscConfig+0x356>
 8000fa8:	6a23      	ldr	r3, [r4, #32]
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fd1c 	bl	80009ec <HAL_GetTick>
 8000fb4:	2702      	movs	r7, #2
 8000fb6:	4682      	mov	sl, r0
 8000fb8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fba:	f04f 0801 	mov.w	r8, #1
 8000fbe:	fa97 f3a7 	rbit	r3, r7
 8000fc2:	fa97 f3a7 	rbit	r3, r7
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d06b      	beq.n	80010a2 <HAL_RCC_OscConfig+0x3d6>
 8000fca:	6a22      	ldr	r2, [r4, #32]
 8000fcc:	fa99 f3a9 	rbit	r3, r9
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	fa08 f303 	lsl.w	r3, r8, r3
 8000fdc:	4213      	tst	r3, r2
 8000fde:	d057      	beq.n	8001090 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	f43f ae85 	beq.w	8000cf0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe6:	69e3      	ldr	r3, [r4, #28]
 8000fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fec:	61e3      	str	r3, [r4, #28]
 8000fee:	e67f      	b.n	8000cf0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000ff0:	2600      	movs	r6, #0
 8000ff2:	e7d2      	b.n	8000f9a <HAL_RCC_OscConfig+0x2ce>
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	10908120 	.word	0x10908120
 8000ffc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001008:	f7ff fcf0 	bl	80009ec <HAL_GetTick>
 800100c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	d4c6      	bmi.n	8000fa2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001014:	f7ff fcea 	bl	80009ec <HAL_GetTick>
 8001018:	eba0 0008 	sub.w	r0, r0, r8
 800101c:	2864      	cmp	r0, #100	; 0x64
 800101e:	d9f6      	bls.n	800100e <HAL_RCC_OscConfig+0x342>
 8001020:	e6b5      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001022:	bb3b      	cbnz	r3, 8001074 <HAL_RCC_OscConfig+0x3a8>
 8001024:	6a23      	ldr	r3, [r4, #32]
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	6223      	str	r3, [r4, #32]
 800102c:	6a23      	ldr	r3, [r4, #32]
 800102e:	f023 0304 	bic.w	r3, r3, #4
 8001032:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001034:	f7ff fcda 	bl	80009ec <HAL_GetTick>
 8001038:	2702      	movs	r7, #2
 800103a:	4682      	mov	sl, r0
 800103c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103e:	f04f 0801 	mov.w	r8, #1
 8001042:	fa97 f3a7 	rbit	r3, r7
 8001046:	fa97 f3a7 	rbit	r3, r7
 800104a:	b373      	cbz	r3, 80010aa <HAL_RCC_OscConfig+0x3de>
 800104c:	6a22      	ldr	r2, [r4, #32]
 800104e:	fa99 f3a9 	rbit	r3, r9
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	fa08 f303 	lsl.w	r3, r8, r3
 800105e:	4213      	tst	r3, r2
 8001060:	d0be      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fcc3 	bl	80009ec <HAL_GetTick>
 8001066:	f241 3388 	movw	r3, #5000	; 0x1388
 800106a:	eba0 000a 	sub.w	r0, r0, sl
 800106e:	4298      	cmp	r0, r3
 8001070:	d9e7      	bls.n	8001042 <HAL_RCC_OscConfig+0x376>
 8001072:	e68c      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001074:	2b05      	cmp	r3, #5
 8001076:	6a23      	ldr	r3, [r4, #32]
 8001078:	d103      	bne.n	8001082 <HAL_RCC_OscConfig+0x3b6>
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6223      	str	r3, [r4, #32]
 8001080:	e792      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2dc>
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	6223      	str	r3, [r4, #32]
 8001088:	6a23      	ldr	r3, [r4, #32]
 800108a:	f023 0304 	bic.w	r3, r3, #4
 800108e:	e78e      	b.n	8000fae <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001090:	f7ff fcac 	bl	80009ec <HAL_GetTick>
 8001094:	f241 3388 	movw	r3, #5000	; 0x1388
 8001098:	eba0 000a 	sub.w	r0, r0, sl
 800109c:	4298      	cmp	r0, r3
 800109e:	d98e      	bls.n	8000fbe <HAL_RCC_OscConfig+0x2f2>
 80010a0:	e675      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
 80010a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010a8:	e790      	b.n	8000fcc <HAL_RCC_OscConfig+0x300>
 80010aa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010b0:	e7cd      	b.n	800104e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b2:	4c44      	ldr	r4, [pc, #272]	; (80011c4 <HAL_RCC_OscConfig+0x4f8>)
 80010b4:	6863      	ldr	r3, [r4, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	f43f ae42 	beq.w	8000d44 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c0:	2a02      	cmp	r2, #2
 80010c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010c6:	d158      	bne.n	800117a <HAL_RCC_OscConfig+0x4ae>
 80010c8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80010cc:	fab3 f383 	clz	r3, r3
 80010d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010de:	f7ff fc85 	bl	80009ec <HAL_GetTick>
 80010e2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80010e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e8:	2601      	movs	r6, #1
 80010ea:	fa97 f3a7 	rbit	r3, r7
 80010ee:	6822      	ldr	r2, [r4, #0]
 80010f0:	fa97 f3a7 	rbit	r3, r7
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	fa06 f303 	lsl.w	r3, r6, r3
 8001100:	4213      	tst	r3, r2
 8001102:	d133      	bne.n	800116c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001104:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001106:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001108:	f023 030f 	bic.w	r3, r3, #15
 800110c:	4313      	orrs	r3, r2
 800110e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001110:	6862      	ldr	r2, [r4, #4]
 8001112:	6a2b      	ldr	r3, [r5, #32]
 8001114:	69e9      	ldr	r1, [r5, #28]
 8001116:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800111a:	430b      	orrs	r3, r1
 800111c:	4313      	orrs	r3, r2
 800111e:	6063      	str	r3, [r4, #4]
 8001120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001124:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800113a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800113c:	f7ff fc56 	bl	80009ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001140:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001142:	4607      	mov	r7, r0
 8001144:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	fa95 f3a5 	rbit	r3, r5
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	fa06 f303 	lsl.w	r3, r6, r3
 800115a:	4213      	tst	r3, r2
 800115c:	f47f adcc 	bne.w	8000cf8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff fc44 	bl	80009ec <HAL_GetTick>
 8001164:	1bc0      	subs	r0, r0, r7
 8001166:	2802      	cmp	r0, #2
 8001168:	d9ec      	bls.n	8001144 <HAL_RCC_OscConfig+0x478>
 800116a:	e610      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fc3e 	bl	80009ec <HAL_GetTick>
 8001170:	eba0 0008 	sub.w	r0, r0, r8
 8001174:	2802      	cmp	r0, #2
 8001176:	d9b8      	bls.n	80010ea <HAL_RCC_OscConfig+0x41e>
 8001178:	e609      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
 800117a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001186:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001190:	f7ff fc2c 	bl	80009ec <HAL_GetTick>
 8001194:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001198:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119a:	2601      	movs	r6, #1
 800119c:	fa95 f3a5 	rbit	r3, r5
 80011a0:	6822      	ldr	r2, [r4, #0]
 80011a2:	fa95 f3a5 	rbit	r3, r5
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	fa06 f303 	lsl.w	r3, r6, r3
 80011b2:	4213      	tst	r3, r2
 80011b4:	f43f ada0 	beq.w	8000cf8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b8:	f7ff fc18 	bl	80009ec <HAL_GetTick>
 80011bc:	1bc0      	subs	r0, r0, r7
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9ec      	bls.n	800119c <HAL_RCC_OscConfig+0x4d0>
 80011c2:	e5e4      	b.n	8000d8e <HAL_RCC_OscConfig+0xc2>
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80011c8:	4911      	ldr	r1, [pc, #68]	; (8001210 <HAL_RCC_GetSysClockFreq+0x48>)
 80011ca:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011cc:	f003 020c 	and.w	r2, r3, #12
 80011d0:	2a08      	cmp	r2, #8
 80011d2:	d11a      	bne.n	800120a <HAL_RCC_GetSysClockFreq+0x42>
 80011d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011d8:	fa92 f2a2 	rbit	r2, r2
 80011dc:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80011de:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80011e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80011e4:	fa90 f0a0 	rbit	r0, r0
 80011e8:	fab0 f080 	clz	r0, r0
 80011ec:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80011f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011f4:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80011f6:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <HAL_RCC_GetSysClockFreq+0x50>)
 80011fc:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <HAL_RCC_GetSysClockFreq+0x54>)
 8001200:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001204:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001206:	4348      	muls	r0, r1
 8001208:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	08002810 	.word	0x08002810
 8001218:	08002820 	.word	0x08002820
 800121c:	007a1200 	.word	0x007a1200

08001220 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001220:	4a5c      	ldr	r2, [pc, #368]	; (8001394 <HAL_RCC_ClockConfig+0x174>)
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	428b      	cmp	r3, r1
{
 800122a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800122e:	4606      	mov	r6, r0
 8001230:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001232:	d330      	bcc.n	8001296 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001234:	6832      	ldr	r2, [r6, #0]
 8001236:	0791      	lsls	r1, r2, #30
 8001238:	d43a      	bmi.n	80012b0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123a:	07d2      	lsls	r2, r2, #31
 800123c:	d440      	bmi.n	80012c0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800123e:	4a55      	ldr	r2, [pc, #340]	; (8001394 <HAL_RCC_ClockConfig+0x174>)
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	429d      	cmp	r5, r3
 8001248:	f0c0 8092 	bcc.w	8001370 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	6832      	ldr	r2, [r6, #0]
 800124e:	4c52      	ldr	r4, [pc, #328]	; (8001398 <HAL_RCC_ClockConfig+0x178>)
 8001250:	f012 0f04 	tst.w	r2, #4
 8001254:	f040 8097 	bne.w	8001386 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001258:	0713      	lsls	r3, r2, #28
 800125a:	d506      	bpl.n	800126a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	6932      	ldr	r2, [r6, #16]
 8001260:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001264:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001268:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800126a:	f7ff ffad 	bl	80011c8 <HAL_RCC_GetSysClockFreq>
 800126e:	6863      	ldr	r3, [r4, #4]
 8001270:	22f0      	movs	r2, #240	; 0xf0
 8001272:	fa92 f2a2 	rbit	r2, r2
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800127e:	40d3      	lsrs	r3, r2
 8001280:	4a46      	ldr	r2, [pc, #280]	; (800139c <HAL_RCC_ClockConfig+0x17c>)
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	40d8      	lsrs	r0, r3
 8001286:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_ClockConfig+0x180>)
 8001288:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fb6c 	bl	8000968 <HAL_InitTick>
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
}
 8001292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f023 0307 	bic.w	r3, r3, #7
 800129c:	430b      	orrs	r3, r1
 800129e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d0c4      	beq.n	8001234 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b0:	4939      	ldr	r1, [pc, #228]	; (8001398 <HAL_RCC_ClockConfig+0x178>)
 80012b2:	68b0      	ldr	r0, [r6, #8]
 80012b4:	684b      	ldr	r3, [r1, #4]
 80012b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ba:	4303      	orrs	r3, r0
 80012bc:	604b      	str	r3, [r1, #4]
 80012be:	e7bc      	b.n	800123a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c0:	6872      	ldr	r2, [r6, #4]
 80012c2:	4c35      	ldr	r4, [pc, #212]	; (8001398 <HAL_RCC_ClockConfig+0x178>)
 80012c4:	2a01      	cmp	r2, #1
 80012c6:	d128      	bne.n	800131a <HAL_RCC_ClockConfig+0xfa>
 80012c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012cc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d0:	6821      	ldr	r1, [r4, #0]
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	d0e1      	beq.n	80012aa <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e6:	6863      	ldr	r3, [r4, #4]
 80012e8:	f023 0303 	bic.w	r3, r3, #3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80012f0:	f7ff fb7c 	bl	80009ec <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f4:	6873      	ldr	r3, [r6, #4]
 80012f6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80012f8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fa:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	d11f      	bne.n	8001340 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	6863      	ldr	r3, [r4, #4]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d099      	beq.n	800123e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130a:	f7ff fb6f 	bl	80009ec <HAL_GetTick>
 800130e:	1bc0      	subs	r0, r0, r7
 8001310:	4540      	cmp	r0, r8
 8001312:	d9f5      	bls.n	8001300 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001314:	2003      	movs	r0, #3
 8001316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131a:	2a02      	cmp	r2, #2
 800131c:	bf0c      	ite	eq
 800131e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001322:	2302      	movne	r3, #2
 8001324:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	6820      	ldr	r0, [r4, #0]
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	4203      	tst	r3, r0
 800133e:	e7d1      	b.n	80012e4 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001340:	2b02      	cmp	r3, #2
 8001342:	d110      	bne.n	8001366 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	f43f af77 	beq.w	800123e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7ff fb4c 	bl	80009ec <HAL_GetTick>
 8001354:	1bc0      	subs	r0, r0, r7
 8001356:	4540      	cmp	r0, r8
 8001358:	d9f4      	bls.n	8001344 <HAL_RCC_ClockConfig+0x124>
 800135a:	e7db      	b.n	8001314 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135c:	f7ff fb46 	bl	80009ec <HAL_GetTick>
 8001360:	1bc0      	subs	r0, r0, r7
 8001362:	4540      	cmp	r0, r8
 8001364:	d8d6      	bhi.n	8001314 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	f013 0f0c 	tst.w	r3, #12
 800136c:	d1f6      	bne.n	800135c <HAL_RCC_ClockConfig+0x13c>
 800136e:	e766      	b.n	800123e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001370:	6813      	ldr	r3, [r2, #0]
 8001372:	f023 0307 	bic.w	r3, r3, #7
 8001376:	432b      	orrs	r3, r5
 8001378:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	429d      	cmp	r5, r3
 8001382:	d192      	bne.n	80012aa <HAL_RCC_ClockConfig+0x8a>
 8001384:	e762      	b.n	800124c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	68f1      	ldr	r1, [r6, #12]
 800138a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800138e:	430b      	orrs	r3, r1
 8001390:	6063      	str	r3, [r4, #4]
 8001392:	e761      	b.n	8001258 <HAL_RCC_ClockConfig+0x38>
 8001394:	40022000 	.word	0x40022000
 8001398:	40021000 	.word	0x40021000
 800139c:	08002830 	.word	0x08002830
 80013a0:	20000008 	.word	0x20000008

080013a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013a4:	4b01      	ldr	r3, [pc, #4]	; (80013ac <HAL_RCC_GetHCLKFreq+0x8>)
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008

080013b0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013b0:	6803      	ldr	r3, [r0, #0]
{
 80013b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013b6:	03df      	lsls	r7, r3, #15
{
 80013b8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013ba:	d523      	bpl.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013bc:	4d9b      	ldr	r5, [pc, #620]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013be:	69eb      	ldr	r3, [r5, #28]
 80013c0:	00de      	lsls	r6, r3, #3
 80013c2:	f100 80d7 	bmi.w	8001574 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	69eb      	ldr	r3, [r5, #28]
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	61eb      	str	r3, [r5, #28]
 80013ce:	69eb      	ldr	r3, [r5, #28]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013d8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4f95      	ldr	r7, [pc, #596]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	05d8      	lsls	r0, r3, #23
 80013e0:	f140 80ca 	bpl.w	8001578 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013e4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013e6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013ea:	f040 80da 	bne.w	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80013ee:	6a2b      	ldr	r3, [r5, #32]
 80013f0:	6862      	ldr	r2, [r4, #4]
 80013f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f6:	4313      	orrs	r3, r2
 80013f8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013fa:	b11e      	cbz	r6, 8001404 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013fc:	69eb      	ldr	r3, [r5, #28]
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001404:	6820      	ldr	r0, [r4, #0]
 8001406:	07c3      	lsls	r3, r0, #31
 8001408:	d506      	bpl.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800140a:	4a88      	ldr	r2, [pc, #544]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800140c:	68a1      	ldr	r1, [r4, #8]
 800140e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001410:	f023 0303 	bic.w	r3, r3, #3
 8001414:	430b      	orrs	r3, r1
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001418:	0787      	lsls	r7, r0, #30
 800141a:	d506      	bpl.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800141c:	4a83      	ldr	r2, [pc, #524]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800141e:	68e1      	ldr	r1, [r4, #12]
 8001420:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001422:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001426:	430b      	orrs	r3, r1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800142a:	0746      	lsls	r6, r0, #29
 800142c:	d506      	bpl.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800142e:	4a7f      	ldr	r2, [pc, #508]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001430:	6921      	ldr	r1, [r4, #16]
 8001432:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001434:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001438:	430b      	orrs	r3, r1
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800143c:	0685      	lsls	r5, r0, #26
 800143e:	d506      	bpl.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001440:	4a7a      	ldr	r2, [pc, #488]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001442:	69e1      	ldr	r1, [r4, #28]
 8001444:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001446:	f023 0310 	bic.w	r3, r3, #16
 800144a:	430b      	orrs	r3, r1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800144e:	0381      	lsls	r1, r0, #14
 8001450:	d506      	bpl.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001452:	4a76      	ldr	r2, [pc, #472]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001454:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001456:	6853      	ldr	r3, [r2, #4]
 8001458:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800145c:	430b      	orrs	r3, r1
 800145e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001460:	0642      	lsls	r2, r0, #25
 8001462:	d506      	bpl.n	8001472 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001464:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001466:	6a21      	ldr	r1, [r4, #32]
 8001468:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800146a:	f023 0320 	bic.w	r3, r3, #32
 800146e:	430b      	orrs	r3, r1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001472:	0343      	lsls	r3, r0, #13
 8001474:	d506      	bpl.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001476:	4a6d      	ldr	r2, [pc, #436]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001478:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800147a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800147c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001480:	430b      	orrs	r3, r1
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001484:	0707      	lsls	r7, r0, #28
 8001486:	d506      	bpl.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800148a:	6961      	ldr	r1, [r4, #20]
 800148c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800148e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001492:	430b      	orrs	r3, r1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001496:	06c6      	lsls	r6, r0, #27
 8001498:	d506      	bpl.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800149a:	4a64      	ldr	r2, [pc, #400]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800149c:	69a1      	ldr	r1, [r4, #24]
 800149e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80014a8:	0585      	lsls	r5, r0, #22
 80014aa:	d506      	bpl.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80014ac:	4a5f      	ldr	r2, [pc, #380]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80014b0:	6853      	ldr	r3, [r2, #4]
 80014b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014b6:	430b      	orrs	r3, r1
 80014b8:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80014ba:	0601      	lsls	r1, r0, #24
 80014bc:	d506      	bpl.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80014be:	4a5b      	ldr	r2, [pc, #364]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014c4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80014c8:	430b      	orrs	r3, r1
 80014ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80014cc:	05c2      	lsls	r2, r0, #23
 80014ce:	d506      	bpl.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80014d0:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014d6:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80014da:	430b      	orrs	r3, r1
 80014dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80014de:	04c3      	lsls	r3, r0, #19
 80014e0:	d506      	bpl.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80014e2:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80014f0:	0487      	lsls	r7, r0, #18
 80014f2:	d506      	bpl.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80014f4:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80014f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014fe:	430b      	orrs	r3, r1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001502:	02c6      	lsls	r6, r0, #11
 8001504:	d506      	bpl.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001506:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001508:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800150a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800150c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001510:	430b      	orrs	r3, r1
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001514:	0285      	lsls	r5, r0, #10
 8001516:	d506      	bpl.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001518:	4a44      	ldr	r2, [pc, #272]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800151a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800151c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800151e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001522:	430b      	orrs	r3, r1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001526:	0241      	lsls	r1, r0, #9
 8001528:	d506      	bpl.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800152a:	4a40      	ldr	r2, [pc, #256]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800152c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800152e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001534:	430b      	orrs	r3, r1
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001538:	0202      	lsls	r2, r0, #8
 800153a:	d506      	bpl.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800153c:	4a3b      	ldr	r2, [pc, #236]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800153e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001540:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001546:	430b      	orrs	r3, r1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800154a:	01c3      	lsls	r3, r0, #7
 800154c:	d506      	bpl.n	800155c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800154e:	4a37      	ldr	r2, [pc, #220]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001550:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001552:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001558:	430b      	orrs	r3, r1
 800155a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800155c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001560:	d01c      	beq.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001562:	4a32      	ldr	r2, [pc, #200]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001564:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001566:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800156c:	430b      	orrs	r3, r1
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001570:	2000      	movs	r0, #0
 8001572:	e013      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001574:	2600      	movs	r6, #0
 8001576:	e730      	b.n	80013da <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001580:	f7ff fa34 	bl	80009ec <HAL_GetTick>
 8001584:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	05d9      	lsls	r1, r3, #23
 800158a:	f53f af2b 	bmi.w	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff fa2d 	bl	80009ec <HAL_GetTick>
 8001592:	eba0 0008 	sub.w	r0, r0, r8
 8001596:	2864      	cmp	r0, #100	; 0x64
 8001598:	d9f5      	bls.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800159a:	2003      	movs	r0, #3
}
 800159c:	b002      	add	sp, #8
 800159e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015a2:	6862      	ldr	r2, [r4, #4]
 80015a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80015a8:	4293      	cmp	r3, r2
 80015aa:	f43f af20 	beq.w	80013ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015ae:	6a29      	ldr	r1, [r5, #32]
 80015b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80015b8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80015bc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001634 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80015c0:	fab2 f282 	clz	r2, r2
 80015c4:	4472      	add	r2, lr
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	2701      	movs	r7, #1
 80015ca:	6017      	str	r7, [r2, #0]
 80015cc:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	4473      	add	r3, lr
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015dc:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 80015de:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015e0:	f57f af05 	bpl.w	80013ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80015e4:	f7ff fa02 	bl	80009ec <HAL_GetTick>
 80015e8:	f04f 0802 	mov.w	r8, #2
 80015ec:	4682      	mov	sl, r0
 80015ee:	46c1      	mov	r9, r8
 80015f0:	fa98 f3a8 	rbit	r3, r8
 80015f4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	b1a3      	cbz	r3, 8001624 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80015fa:	6a2a      	ldr	r2, [r5, #32]
 80015fc:	fa99 f3a9 	rbit	r3, r9
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	fa07 f303 	lsl.w	r3, r7, r3
 800160c:	4213      	tst	r3, r2
 800160e:	f47f aeee 	bne.w	80013ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff f9eb 	bl	80009ec <HAL_GetTick>
 8001616:	f241 3388 	movw	r3, #5000	; 0x1388
 800161a:	eba0 000a 	sub.w	r0, r0, sl
 800161e:	4298      	cmp	r0, r3
 8001620:	d9e6      	bls.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001622:	e7ba      	b.n	800159a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001624:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800162a:	e7e7      	b.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800162c:	40021000 	.word	0x40021000
 8001630:	40007000 	.word	0x40007000
 8001634:	10908100 	.word	0x10908100

08001638 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001638:	6803      	ldr	r3, [r0, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800164a:	2000      	movs	r0, #0
 800164c:	4770      	bx	lr

0800164e <HAL_TIM_PeriodElapsedCallback>:
 800164e:	4770      	bx	lr

08001650 <HAL_TIM_OC_DelayElapsedCallback>:
 8001650:	4770      	bx	lr

08001652 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001652:	4770      	bx	lr

08001654 <HAL_TIM_TriggerCallback>:
 8001654:	4770      	bx	lr

08001656 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001656:	6803      	ldr	r3, [r0, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	0791      	lsls	r1, r2, #30
{
 800165c:	b510      	push	{r4, lr}
 800165e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001660:	d50f      	bpl.n	8001682 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	0792      	lsls	r2, r2, #30
 8001666:	d50c      	bpl.n	8001682 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001668:	f06f 0202 	mvn.w	r2, #2
 800166c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800166e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001670:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001672:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001674:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001676:	f000 8085 	beq.w	8001784 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800167a:	f000 fda1 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167e:	2300      	movs	r3, #0
 8001680:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	0752      	lsls	r2, r2, #29
 8001688:	d510      	bpl.n	80016ac <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	0750      	lsls	r0, r2, #29
 800168e:	d50d      	bpl.n	80016ac <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001690:	f06f 0204 	mvn.w	r2, #4
 8001694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001696:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001698:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800169a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800169e:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80016a0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016a2:	d075      	beq.n	8001790 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80016a4:	f000 fd8c 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a8:	2300      	movs	r3, #0
 80016aa:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	0711      	lsls	r1, r2, #28
 80016b2:	d50f      	bpl.n	80016d4 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	0712      	lsls	r2, r2, #28
 80016b8:	d50c      	bpl.n	80016d4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80016ba:	f06f 0208 	mvn.w	r2, #8
 80016be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016c0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016c2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016c4:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016c6:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80016c8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016ca:	d067      	beq.n	800179c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80016cc:	f000 fd78 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d0:	2300      	movs	r3, #0
 80016d2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	06d0      	lsls	r0, r2, #27
 80016da:	d510      	bpl.n	80016fe <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	06d1      	lsls	r1, r2, #27
 80016e0:	d50d      	bpl.n	80016fe <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80016e2:	f06f 0210 	mvn.w	r2, #16
 80016e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016e8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ea:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016ec:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016f0:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80016f2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016f4:	d058      	beq.n	80017a8 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80016f6:	f000 fd63 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fa:	2300      	movs	r3, #0
 80016fc:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	07d2      	lsls	r2, r2, #31
 8001704:	d508      	bpl.n	8001718 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	07d0      	lsls	r0, r2, #31
 800170a:	d505      	bpl.n	8001718 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800170c:	f06f 0201 	mvn.w	r2, #1
 8001710:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff ff9b 	bl	800164e <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	0611      	lsls	r1, r2, #24
 800171e:	d508      	bpl.n	8001732 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	0612      	lsls	r2, r2, #24
 8001724:	d505      	bpl.n	8001732 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001726:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800172a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd44 	bl	80021ba <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	05d0      	lsls	r0, r2, #23
 8001738:	d508      	bpl.n	800174c <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	0611      	lsls	r1, r2, #24
 800173e:	d505      	bpl.n	800174c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001740:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001744:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001746:	4620      	mov	r0, r4
 8001748:	f000 fd38 	bl	80021bc <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	0652      	lsls	r2, r2, #25
 8001752:	d508      	bpl.n	8001766 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	0650      	lsls	r0, r2, #25
 8001758:	d505      	bpl.n	8001766 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800175a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800175e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff ff77 	bl	8001654 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	0691      	lsls	r1, r2, #26
 800176c:	d522      	bpl.n	80017b4 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	0692      	lsls	r2, r2, #26
 8001772:	d51f      	bpl.n	80017b4 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001774:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001778:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800177a:	611a      	str	r2, [r3, #16]
    }
  }
}
 800177c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001780:	f000 bd1a 	b.w	80021b8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001784:	f7ff ff64 	bl	8001650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff ff62 	bl	8001652 <HAL_TIM_PWM_PulseFinishedCallback>
 800178e:	e776      	b.n	800167e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001790:	f7ff ff5e 	bl	8001650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff ff5c 	bl	8001652 <HAL_TIM_PWM_PulseFinishedCallback>
 800179a:	e785      	b.n	80016a8 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800179c:	f7ff ff58 	bl	8001650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff ff56 	bl	8001652 <HAL_TIM_PWM_PulseFinishedCallback>
 80017a6:	e793      	b.n	80016d0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a8:	f7ff ff52 	bl	8001650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff ff50 	bl	8001652 <HAL_TIM_PWM_PulseFinishedCallback>
 80017b2:	e7a2      	b.n	80016fa <HAL_TIM_IRQHandler+0xa4>
 80017b4:	bd10      	pop	{r4, pc}
	...

080017b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017b8:	4a32      	ldr	r2, [pc, #200]	; (8001884 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80017ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017bc:	4290      	cmp	r0, r2
 80017be:	d012      	beq.n	80017e6 <TIM_Base_SetConfig+0x2e>
 80017c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017c4:	d00f      	beq.n	80017e6 <TIM_Base_SetConfig+0x2e>
 80017c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80017ca:	4290      	cmp	r0, r2
 80017cc:	d00b      	beq.n	80017e6 <TIM_Base_SetConfig+0x2e>
 80017ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d2:	4290      	cmp	r0, r2
 80017d4:	d007      	beq.n	80017e6 <TIM_Base_SetConfig+0x2e>
 80017d6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80017da:	4290      	cmp	r0, r2
 80017dc:	d003      	beq.n	80017e6 <TIM_Base_SetConfig+0x2e>
 80017de:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80017e2:	4290      	cmp	r0, r2
 80017e4:	d115      	bne.n	8001812 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80017e6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017ec:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ee:	4a25      	ldr	r2, [pc, #148]	; (8001884 <TIM_Base_SetConfig+0xcc>)
 80017f0:	4290      	cmp	r0, r2
 80017f2:	d01d      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 80017f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017f8:	d01a      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 80017fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80017fe:	4290      	cmp	r0, r2
 8001800:	d016      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 8001802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001806:	4290      	cmp	r0, r2
 8001808:	d012      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 800180a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800180e:	4290      	cmp	r0, r2
 8001810:	d00e      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <TIM_Base_SetConfig+0xd0>)
 8001814:	4290      	cmp	r0, r2
 8001816:	d00b      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 8001818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800181c:	4290      	cmp	r0, r2
 800181e:	d007      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 8001820:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001824:	4290      	cmp	r0, r2
 8001826:	d003      	beq.n	8001830 <TIM_Base_SetConfig+0x78>
 8001828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182c:	4290      	cmp	r0, r2
 800182e:	d103      	bne.n	8001838 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001830:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001836:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001838:	694a      	ldr	r2, [r1, #20]
 800183a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800183e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001840:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001842:	688b      	ldr	r3, [r1, #8]
 8001844:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001846:	680b      	ldr	r3, [r1, #0]
 8001848:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <TIM_Base_SetConfig+0xcc>)
 800184c:	4298      	cmp	r0, r3
 800184e:	d013      	beq.n	8001878 <TIM_Base_SetConfig+0xc0>
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	4298      	cmp	r0, r3
 8001856:	d00f      	beq.n	8001878 <TIM_Base_SetConfig+0xc0>
 8001858:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800185c:	4298      	cmp	r0, r3
 800185e:	d00b      	beq.n	8001878 <TIM_Base_SetConfig+0xc0>
 8001860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001864:	4298      	cmp	r0, r3
 8001866:	d007      	beq.n	8001878 <TIM_Base_SetConfig+0xc0>
 8001868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800186c:	4298      	cmp	r0, r3
 800186e:	d003      	beq.n	8001878 <TIM_Base_SetConfig+0xc0>
 8001870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001874:	4298      	cmp	r0, r3
 8001876:	d101      	bne.n	800187c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001878:	690b      	ldr	r3, [r1, #16]
 800187a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800187c:	2301      	movs	r3, #1
 800187e:	6143      	str	r3, [r0, #20]
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40014000 	.word	0x40014000

0800188c <HAL_TIM_Base_Init>:
{ 
 800188c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800188e:	4604      	mov	r4, r0
 8001890:	b1a0      	cbz	r0, 80018bc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001892:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001896:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800189a:	b91b      	cbnz	r3, 80018a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800189c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80018a0:	f000 fe80 	bl	80025a4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80018aa:	6820      	ldr	r0, [r4, #0]
 80018ac:	1d21      	adds	r1, r4, #4
 80018ae:	f7ff ff83 	bl	80017b8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018b8:	2000      	movs	r0, #0
 80018ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
}
 80018be:	bd10      	pop	{r4, pc}

080018c0 <HAL_TIM_PWM_Init>:
{
 80018c0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80018c2:	4604      	mov	r4, r0
 80018c4:	b1a0      	cbz	r0, 80018f0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80018c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ce:	b91b      	cbnz	r3, 80018d8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80018d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80018d4:	f000 feac 	bl	8002630 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80018d8:	2302      	movs	r3, #2
 80018da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80018de:	6820      	ldr	r0, [r4, #0]
 80018e0:	1d21      	adds	r1, r4, #4
 80018e2:	f7ff ff69 	bl	80017b8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018ec:	2000      	movs	r0, #0
 80018ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018f0:	2001      	movs	r0, #1
}
 80018f2:	bd10      	pop	{r4, pc}

080018f4 <HAL_TIM_IC_Init>:
{
 80018f4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80018f6:	4604      	mov	r4, r0
 80018f8:	b1a0      	cbz	r0, 8001924 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80018fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001902:	b91b      	cbnz	r3, 800190c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001904:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001908:	f000 fe6a 	bl	80025e0 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 800190c:	2302      	movs	r3, #2
 800190e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001912:	6820      	ldr	r0, [r4, #0]
 8001914:	1d21      	adds	r1, r4, #4
 8001916:	f7ff ff4f 	bl	80017b8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800191a:	2301      	movs	r3, #1
 800191c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001920:	2000      	movs	r0, #0
 8001922:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001924:	2001      	movs	r0, #1
}
 8001926:	bd10      	pop	{r4, pc}

08001928 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001928:	6a03      	ldr	r3, [r0, #32]
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001930:	6a03      	ldr	r3, [r0, #32]
{
 8001932:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001934:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001936:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001938:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800193a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800193e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001942:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001944:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001946:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800194a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800194c:	4d1f      	ldr	r5, [pc, #124]	; (80019cc <TIM_OC1_SetConfig+0xa4>)
 800194e:	42a8      	cmp	r0, r5
 8001950:	d013      	beq.n	800197a <TIM_OC1_SetConfig+0x52>
 8001952:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001956:	42a8      	cmp	r0, r5
 8001958:	d00f      	beq.n	800197a <TIM_OC1_SetConfig+0x52>
 800195a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800195e:	42a8      	cmp	r0, r5
 8001960:	d00b      	beq.n	800197a <TIM_OC1_SetConfig+0x52>
 8001962:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001966:	42a8      	cmp	r0, r5
 8001968:	d007      	beq.n	800197a <TIM_OC1_SetConfig+0x52>
 800196a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196e:	42a8      	cmp	r0, r5
 8001970:	d003      	beq.n	800197a <TIM_OC1_SetConfig+0x52>
 8001972:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001976:	42a8      	cmp	r0, r5
 8001978:	d122      	bne.n	80019c0 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800197a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800197c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001980:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001982:	4d12      	ldr	r5, [pc, #72]	; (80019cc <TIM_OC1_SetConfig+0xa4>)
 8001984:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001986:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800198a:	d013      	beq.n	80019b4 <TIM_OC1_SetConfig+0x8c>
 800198c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001990:	42a8      	cmp	r0, r5
 8001992:	d00f      	beq.n	80019b4 <TIM_OC1_SetConfig+0x8c>
 8001994:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001998:	42a8      	cmp	r0, r5
 800199a:	d00b      	beq.n	80019b4 <TIM_OC1_SetConfig+0x8c>
 800199c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019a0:	42a8      	cmp	r0, r5
 80019a2:	d007      	beq.n	80019b4 <TIM_OC1_SetConfig+0x8c>
 80019a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019a8:	42a8      	cmp	r0, r5
 80019aa:	d003      	beq.n	80019b4 <TIM_OC1_SetConfig+0x8c>
 80019ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80019b0:	42a8      	cmp	r0, r5
 80019b2:	d105      	bne.n	80019c0 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019b4:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80019b8:	698e      	ldr	r6, [r1, #24]
 80019ba:	694c      	ldr	r4, [r1, #20]
 80019bc:	4334      	orrs	r4, r6
 80019be:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019c0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019c2:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80019c4:	684a      	ldr	r2, [r1, #4]
 80019c6:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80019c8:	6203      	str	r3, [r0, #32]
 80019ca:	bd70      	pop	{r4, r5, r6, pc}
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019d0:	6a03      	ldr	r3, [r0, #32]
 80019d2:	f023 0310 	bic.w	r3, r3, #16
 80019d6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019d8:	6a03      	ldr	r3, [r0, #32]
{
 80019da:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80019dc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019de:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80019e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80019f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80019f8:	4d1a      	ldr	r5, [pc, #104]	; (8001a64 <TIM_OC2_SetConfig+0x94>)
 80019fa:	42a8      	cmp	r0, r5
 80019fc:	d007      	beq.n	8001a0e <TIM_OC2_SetConfig+0x3e>
 80019fe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a02:	42a8      	cmp	r0, r5
 8001a04:	d003      	beq.n	8001a0e <TIM_OC2_SetConfig+0x3e>
 8001a06:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001a0a:	42a8      	cmp	r0, r5
 8001a0c:	d10d      	bne.n	8001a2a <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a0e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a18:	4d12      	ldr	r5, [pc, #72]	; (8001a64 <TIM_OC2_SetConfig+0x94>)
 8001a1a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a20:	d012      	beq.n	8001a48 <TIM_OC2_SetConfig+0x78>
 8001a22:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a26:	42a8      	cmp	r0, r5
 8001a28:	d00e      	beq.n	8001a48 <TIM_OC2_SetConfig+0x78>
 8001a2a:	4d0f      	ldr	r5, [pc, #60]	; (8001a68 <TIM_OC2_SetConfig+0x98>)
 8001a2c:	42a8      	cmp	r0, r5
 8001a2e:	d00b      	beq.n	8001a48 <TIM_OC2_SetConfig+0x78>
 8001a30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a34:	42a8      	cmp	r0, r5
 8001a36:	d007      	beq.n	8001a48 <TIM_OC2_SetConfig+0x78>
 8001a38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a3c:	42a8      	cmp	r0, r5
 8001a3e:	d003      	beq.n	8001a48 <TIM_OC2_SetConfig+0x78>
 8001a40:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	d106      	bne.n	8001a56 <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a48:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a4c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a4e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a50:	4334      	orrs	r4, r6
 8001a52:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a56:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a58:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a5a:	684a      	ldr	r2, [r1, #4]
 8001a5c:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001a5e:	6203      	str	r3, [r0, #32]
 8001a60:	bd70      	pop	{r4, r5, r6, pc}
 8001a62:	bf00      	nop
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40014000 	.word	0x40014000

08001a6c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a6c:	6a03      	ldr	r3, [r0, #32]
 8001a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a72:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a74:	6a03      	ldr	r3, [r0, #32]
{
 8001a76:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a78:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001a7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a82:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a86:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a88:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001a8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a92:	4d1a      	ldr	r5, [pc, #104]	; (8001afc <TIM_OC3_SetConfig+0x90>)
 8001a94:	42a8      	cmp	r0, r5
 8001a96:	d007      	beq.n	8001aa8 <TIM_OC3_SetConfig+0x3c>
 8001a98:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a9c:	42a8      	cmp	r0, r5
 8001a9e:	d003      	beq.n	8001aa8 <TIM_OC3_SetConfig+0x3c>
 8001aa0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001aa4:	42a8      	cmp	r0, r5
 8001aa6:	d10d      	bne.n	8001ac4 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001aa8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001aae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ab2:	4d12      	ldr	r5, [pc, #72]	; (8001afc <TIM_OC3_SetConfig+0x90>)
 8001ab4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001aba:	d012      	beq.n	8001ae2 <TIM_OC3_SetConfig+0x76>
 8001abc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ac0:	42a8      	cmp	r0, r5
 8001ac2:	d00e      	beq.n	8001ae2 <TIM_OC3_SetConfig+0x76>
 8001ac4:	4d0e      	ldr	r5, [pc, #56]	; (8001b00 <TIM_OC3_SetConfig+0x94>)
 8001ac6:	42a8      	cmp	r0, r5
 8001ac8:	d00b      	beq.n	8001ae2 <TIM_OC3_SetConfig+0x76>
 8001aca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ace:	42a8      	cmp	r0, r5
 8001ad0:	d007      	beq.n	8001ae2 <TIM_OC3_SetConfig+0x76>
 8001ad2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ad6:	42a8      	cmp	r0, r5
 8001ad8:	d003      	beq.n	8001ae2 <TIM_OC3_SetConfig+0x76>
 8001ada:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	d106      	bne.n	8001af0 <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ae2:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ae6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ae8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001aea:	4334      	orrs	r4, r6
 8001aec:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001af0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001af2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001af4:	684a      	ldr	r2, [r1, #4]
 8001af6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001af8:	6203      	str	r3, [r0, #32]
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40014000 	.word	0x40014000

08001b04 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b04:	6a03      	ldr	r3, [r0, #32]
 8001b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b0a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b0c:	6a03      	ldr	r3, [r0, #32]
{
 8001b0e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b10:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b12:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b16:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001b1a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b22:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b28:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2c:	4d10      	ldr	r5, [pc, #64]	; (8001b70 <TIM_OC4_SetConfig+0x6c>)
 8001b2e:	42a8      	cmp	r0, r5
 8001b30:	d013      	beq.n	8001b5a <TIM_OC4_SetConfig+0x56>
 8001b32:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b36:	42a8      	cmp	r0, r5
 8001b38:	d00f      	beq.n	8001b5a <TIM_OC4_SetConfig+0x56>
 8001b3a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001b3e:	42a8      	cmp	r0, r5
 8001b40:	d00b      	beq.n	8001b5a <TIM_OC4_SetConfig+0x56>
 8001b42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b46:	42a8      	cmp	r0, r5
 8001b48:	d007      	beq.n	8001b5a <TIM_OC4_SetConfig+0x56>
 8001b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d003      	beq.n	8001b5a <TIM_OC4_SetConfig+0x56>
 8001b52:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b56:	42a8      	cmp	r0, r5
 8001b58:	d104      	bne.n	8001b64 <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b5a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b5c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b60:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b64:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b66:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b68:	684a      	ldr	r2, [r1, #4]
 8001b6a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b6c:	6203      	str	r3, [r0, #32]
 8001b6e:	bd30      	pop	{r4, r5, pc}
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b76:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b78:	4e18      	ldr	r6, [pc, #96]	; (8001bdc <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b7a:	f024 0401 	bic.w	r4, r4, #1
 8001b7e:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b80:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001b82:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001b84:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b86:	d016      	beq.n	8001bb6 <TIM_TI1_SetConfig+0x42>
 8001b88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b8c:	d013      	beq.n	8001bb6 <TIM_TI1_SetConfig+0x42>
 8001b8e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001b92:	42b0      	cmp	r0, r6
 8001b94:	d00f      	beq.n	8001bb6 <TIM_TI1_SetConfig+0x42>
 8001b96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b9a:	42b0      	cmp	r0, r6
 8001b9c:	d00b      	beq.n	8001bb6 <TIM_TI1_SetConfig+0x42>
 8001b9e:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8001ba2:	42b0      	cmp	r0, r6
 8001ba4:	d007      	beq.n	8001bb6 <TIM_TI1_SetConfig+0x42>
 8001ba6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8001baa:	42b0      	cmp	r0, r6
 8001bac:	d003      	beq.n	8001bb6 <TIM_TI1_SetConfig+0x42>
 8001bae:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8001bb2:	42b0      	cmp	r0, r6
 8001bb4:	d10f      	bne.n	8001bd6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001bb6:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001bba:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bbc:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bc2:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bc4:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001bc8:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bcc:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001bce:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bd0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bd2:	6201      	str	r1, [r0, #32]
}
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001bd6:	f044 0201 	orr.w	r2, r4, #1
 8001bda:	e7ef      	b.n	8001bbc <TIM_TI1_SetConfig+0x48>
 8001bdc:	40012c00 	.word	0x40012c00

08001be0 <HAL_TIM_IC_ConfigChannel>:
{
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001be2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
{
 8001be8:	4604      	mov	r4, r0
 8001bea:	460d      	mov	r5, r1
 8001bec:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001bf0:	d019      	beq.n	8001c26 <HAL_TIM_IC_ConfigChannel+0x46>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001bfc:	b9a2      	cbnz	r2, 8001c28 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001bfe:	68cb      	ldr	r3, [r1, #12]
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	c906      	ldmia	r1, {r1, r2}
 8001c04:	f7ff ffb6 	bl	8001b74 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c08:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c0a:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	f022 020c 	bic.w	r2, r2, #12
 8001c12:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001c1a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c22:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001c28:	2a04      	cmp	r2, #4
 8001c2a:	688e      	ldr	r6, [r1, #8]
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	68e8      	ldr	r0, [r5, #12]
 8001c30:	c982      	ldmia	r1, {r1, r7}
 8001c32:	d11f      	bne.n	8001c74 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	f022 0210 	bic.w	r2, r2, #16
 8001c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c3c:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001c3e:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001c40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001c44:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c48:	0300      	lsls	r0, r0, #12
 8001c4a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c4c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c50:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c52:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c54:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c58:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c5c:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c60:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c68:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001c70:	619e      	str	r6, [r3, #24]
 8001c72:	e7d2      	b.n	8001c1a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001c74:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c76:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001c78:	d11c      	bne.n	8001cb4 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c80:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001c82:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001c84:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001c88:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c8a:	0100      	lsls	r0, r0, #4
 8001c8c:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001c8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c92:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c94:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c96:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001c9a:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c9e:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ca0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001ca2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	f022 020c 	bic.w	r2, r2, #12
 8001caa:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001cb0:	61de      	str	r6, [r3, #28]
 8001cb2:	e7b2      	b.n	8001c1a <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cba:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001cbc:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001cbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001cc2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cc6:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cc8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001ccc:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001cce:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cd0:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001cd2:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001cd6:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001cda:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001cdc:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001cde:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ce6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001cee:	e7df      	b.n	8001cb0 <HAL_TIM_IC_ConfigChannel+0xd0>

08001cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cf0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001cf2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cf4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cfa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001cfe:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d00:	6083      	str	r3, [r0, #8]
 8001d02:	bd10      	pop	{r4, pc}

08001d04 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d08:	2b01      	cmp	r3, #1
{
 8001d0a:	b570      	push	{r4, r5, r6, lr}
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d12:	d01a      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d18:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d20:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d22:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <HAL_TIM_ConfigClockSource+0x168>)
 8001d24:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001d26:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d28:	680b      	ldr	r3, [r1, #0]
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d075      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0x116>
 8001d2e:	d818      	bhi.n	8001d62 <HAL_TIM_ConfigClockSource+0x5e>
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	f000 808f 	beq.w	8001e54 <HAL_TIM_ConfigClockSource+0x150>
 8001d36:	d809      	bhi.n	8001d4c <HAL_TIM_ConfigClockSource+0x48>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8085 	beq.w	8001e48 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001d3e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d40:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d46:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	f000 8087 	beq.w	8001e60 <HAL_TIM_ConfigClockSource+0x15c>
 8001d52:	2b30      	cmp	r3, #48	; 0x30
 8001d54:	d1f3      	bne.n	8001d3e <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001d56:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d5c:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001d60:	e033      	b.n	8001dca <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001d62:	2b70      	cmp	r3, #112	; 0x70
 8001d64:	d033      	beq.n	8001dce <HAL_TIM_ConfigClockSource+0xca>
 8001d66:	d81b      	bhi.n	8001da0 <HAL_TIM_ConfigClockSource+0x9c>
 8001d68:	2b50      	cmp	r3, #80	; 0x50
 8001d6a:	d03f      	beq.n	8001dec <HAL_TIM_ConfigClockSource+0xe8>
 8001d6c:	2b60      	cmp	r3, #96	; 0x60
 8001d6e:	d1e6      	bne.n	8001d3e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001d70:	684d      	ldr	r5, [r1, #4]
 8001d72:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d74:	6a01      	ldr	r1, [r0, #32]
 8001d76:	f021 0110 	bic.w	r1, r1, #16
 8001d7a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d7c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d7e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d80:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d88:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d8c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d90:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d92:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001d94:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d9a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001d9e:	e014      	b.n	8001dca <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da4:	d00c      	beq.n	8001dc0 <HAL_TIM_ConfigClockSource+0xbc>
 8001da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001daa:	d1c8      	bne.n	8001d3e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001dac:	68cb      	ldr	r3, [r1, #12]
 8001dae:	684a      	ldr	r2, [r1, #4]
 8001db0:	6889      	ldr	r1, [r1, #8]
 8001db2:	f7ff ff9d 	bl	8001cf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	6893      	ldr	r3, [r2, #8]
 8001dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbe:	e013      	b.n	8001de8 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001dc0:	6883      	ldr	r3, [r0, #8]
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001dca:	6083      	str	r3, [r0, #8]
 8001dcc:	e7b7      	b.n	8001d3e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001dce:	68cb      	ldr	r3, [r1, #12]
 8001dd0:	684a      	ldr	r2, [r1, #4]
 8001dd2:	6889      	ldr	r1, [r1, #8]
 8001dd4:	f7ff ff8c 	bl	8001cf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001de8:	6093      	str	r3, [r2, #8]
    break;
 8001dea:	e7a8      	b.n	8001d3e <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001dec:	684a      	ldr	r2, [r1, #4]
 8001dee:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001df0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df2:	6a05      	ldr	r5, [r0, #32]
 8001df4:	f025 0501 	bic.w	r5, r5, #1
 8001df8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001dfa:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dfc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e04:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e08:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e0a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e0c:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001e0e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e14:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001e18:	e7d7      	b.n	8001dca <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001e1a:	684a      	ldr	r2, [r1, #4]
 8001e1c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e1e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e20:	6a05      	ldr	r5, [r0, #32]
 8001e22:	f025 0501 	bic.w	r5, r5, #1
 8001e26:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e28:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e2a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e32:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e36:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e38:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e3a:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001e3c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e42:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001e46:	e7c0      	b.n	8001dca <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e48:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e4e:	f043 0307 	orr.w	r3, r3, #7
 8001e52:	e7ba      	b.n	8001dca <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e54:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e5a:	f043 0317 	orr.w	r3, r3, #23
 8001e5e:	e7b4      	b.n	8001dca <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001e60:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e66:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001e6a:	e7ae      	b.n	8001dca <HAL_TIM_ConfigClockSource+0xc6>
 8001e6c:	fffe0088 	.word	0xfffe0088

08001e70 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e70:	6a03      	ldr	r3, [r0, #32]
{
 8001e72:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001e74:	2401      	movs	r4, #1
 8001e76:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001e78:	ea23 0304 	bic.w	r3, r3, r4
 8001e7c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001e7e:	6a03      	ldr	r3, [r0, #32]
 8001e80:	408a      	lsls	r2, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	6202      	str	r2, [r0, #32]
 8001e86:	bd10      	pop	{r4, pc}

08001e88 <HAL_TIM_PWM_Start_IT>:
{
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	4604      	mov	r4, r0
  switch (Channel)
 8001e8c:	290c      	cmp	r1, #12
 8001e8e:	d80d      	bhi.n	8001eac <HAL_TIM_PWM_Start_IT+0x24>
 8001e90:	e8df f001 	tbb	[pc, r1]
 8001e94:	0c0c0c07 	.word	0x0c0c0c07
 8001e98:	0c0c0c32 	.word	0x0c0c0c32
 8001e9c:	0c0c0c37 	.word	0x0c0c0c37
 8001ea0:	3c          	.byte	0x3c
 8001ea1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ea2:	6802      	ldr	r2, [r0, #0]
 8001ea4:	68d3      	ldr	r3, [r2, #12]
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001eaa:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eac:	2201      	movs	r2, #1
 8001eae:	6820      	ldr	r0, [r4, #0]
 8001eb0:	f7ff ffde 	bl	8001e70 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_TIM_PWM_Start_IT+0x90>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_TIM_PWM_Start_IT+0x5c>
 8001ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00f      	beq.n	8001ee4 <HAL_TIM_PWM_Start_IT+0x5c>
 8001ec4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <HAL_TIM_PWM_Start_IT+0x5c>
 8001ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_TIM_PWM_Start_IT+0x5c>
 8001ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <HAL_TIM_PWM_Start_IT+0x5c>
 8001edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d103      	bne.n	8001eec <HAL_TIM_PWM_Start_IT+0x64>
    __HAL_TIM_MOE_ENABLE(htim);
 8001ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eea:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
} 
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ef8:	6802      	ldr	r2, [r0, #0]
 8001efa:	68d3      	ldr	r3, [r2, #12]
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	e7d3      	b.n	8001eaa <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f02:	6802      	ldr	r2, [r0, #0]
 8001f04:	68d3      	ldr	r3, [r2, #12]
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	e7ce      	b.n	8001eaa <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f0c:	6802      	ldr	r2, [r0, #0]
 8001f0e:	68d3      	ldr	r3, [r2, #12]
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	e7c9      	b.n	8001eaa <HAL_TIM_PWM_Start_IT+0x22>
 8001f16:	bf00      	nop
 8001f18:	40012c00 	.word	0x40012c00

08001f1c <HAL_TIM_IC_Start_IT>:
{
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	4604      	mov	r4, r0
  switch (Channel)
 8001f20:	290c      	cmp	r1, #12
 8001f22:	d80d      	bhi.n	8001f40 <HAL_TIM_IC_Start_IT+0x24>
 8001f24:	e8df f001 	tbb	[pc, r1]
 8001f28:	0c0c0c07 	.word	0x0c0c0c07
 8001f2c:	0c0c0c17 	.word	0x0c0c0c17
 8001f30:	0c0c0c1c 	.word	0x0c0c0c1c
 8001f34:	21          	.byte	0x21
 8001f35:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	68d3      	ldr	r3, [r2, #12]
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f3e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f40:	6820      	ldr	r0, [r4, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f7ff ff94 	bl	8001e70 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6013      	str	r3, [r2, #0]
} 
 8001f52:	2000      	movs	r0, #0
 8001f54:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f56:	6802      	ldr	r2, [r0, #0]
 8001f58:	68d3      	ldr	r3, [r2, #12]
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	e7ee      	b.n	8001f3e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f60:	6802      	ldr	r2, [r0, #0]
 8001f62:	68d3      	ldr	r3, [r2, #12]
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	e7e9      	b.n	8001f3e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f6a:	6802      	ldr	r2, [r0, #0]
 8001f6c:	68d3      	ldr	r3, [r2, #12]
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	e7e4      	b.n	8001f3e <HAL_TIM_IC_Start_IT+0x22>

08001f74 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f74:	6a03      	ldr	r3, [r0, #32]
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f7c:	6a03      	ldr	r3, [r0, #32]
{
 8001f7e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f80:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f82:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001f86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001f8e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001f92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f96:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f9a:	4d11      	ldr	r5, [pc, #68]	; (8001fe0 <TIM_OC5_SetConfig+0x6c>)
 8001f9c:	42a8      	cmp	r0, r5
 8001f9e:	d013      	beq.n	8001fc8 <TIM_OC5_SetConfig+0x54>
 8001fa0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001fa4:	42a8      	cmp	r0, r5
 8001fa6:	d00f      	beq.n	8001fc8 <TIM_OC5_SetConfig+0x54>
 8001fa8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001fac:	42a8      	cmp	r0, r5
 8001fae:	d00b      	beq.n	8001fc8 <TIM_OC5_SetConfig+0x54>
 8001fb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fb4:	42a8      	cmp	r0, r5
 8001fb6:	d007      	beq.n	8001fc8 <TIM_OC5_SetConfig+0x54>
 8001fb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fbc:	42a8      	cmp	r0, r5
 8001fbe:	d003      	beq.n	8001fc8 <TIM_OC5_SetConfig+0x54>
 8001fc0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001fc4:	42a8      	cmp	r0, r5
 8001fc6:	d104      	bne.n	8001fd2 <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001fc8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001fca:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001fce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001fd4:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001fd6:	684a      	ldr	r2, [r1, #4]
 8001fd8:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001fda:	6203      	str	r3, [r0, #32]
 8001fdc:	bd30      	pop	{r4, r5, pc}
 8001fde:	bf00      	nop
 8001fe0:	40012c00 	.word	0x40012c00

08001fe4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001fe4:	6a03      	ldr	r3, [r0, #32]
 8001fe6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fea:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fec:	6a03      	ldr	r3, [r0, #32]
{
 8001fee:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001ff0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001ff2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001ff6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ffa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ffe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002002:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002004:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002008:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800200c:	4d10      	ldr	r5, [pc, #64]	; (8002050 <TIM_OC6_SetConfig+0x6c>)
 800200e:	42a8      	cmp	r0, r5
 8002010:	d013      	beq.n	800203a <TIM_OC6_SetConfig+0x56>
 8002012:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002016:	42a8      	cmp	r0, r5
 8002018:	d00f      	beq.n	800203a <TIM_OC6_SetConfig+0x56>
 800201a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800201e:	42a8      	cmp	r0, r5
 8002020:	d00b      	beq.n	800203a <TIM_OC6_SetConfig+0x56>
 8002022:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002026:	42a8      	cmp	r0, r5
 8002028:	d007      	beq.n	800203a <TIM_OC6_SetConfig+0x56>
 800202a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800202e:	42a8      	cmp	r0, r5
 8002030:	d003      	beq.n	800203a <TIM_OC6_SetConfig+0x56>
 8002032:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002036:	42a8      	cmp	r0, r5
 8002038:	d104      	bne.n	8002044 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800203a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800203c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002040:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002044:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002046:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002048:	684a      	ldr	r2, [r1, #4]
 800204a:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800204c:	6203      	str	r3, [r0, #32]
 800204e:	bd30      	pop	{r4, r5, pc}
 8002050:	40012c00 	.word	0x40012c00

08002054 <HAL_TIM_PWM_ConfigChannel>:
{
 8002054:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002056:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800205a:	2b01      	cmp	r3, #1
{
 800205c:	4604      	mov	r4, r0
 800205e:	460d      	mov	r5, r1
 8002060:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002064:	d010      	beq.n	8002088 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002066:	2301      	movs	r3, #1
  switch (Channel)
 8002068:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800206a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800206e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002072:	d043      	beq.n	80020fc <HAL_TIM_PWM_ConfigChannel+0xa8>
 8002074:	d809      	bhi.n	800208a <HAL_TIM_PWM_ConfigChannel+0x36>
 8002076:	b1fa      	cbz	r2, 80020b8 <HAL_TIM_PWM_ConfigChannel+0x64>
 8002078:	2a04      	cmp	r2, #4
 800207a:	d02e      	beq.n	80020da <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 800207c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800207e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002080:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002084:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002088:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800208a:	2a10      	cmp	r2, #16
 800208c:	d047      	beq.n	800211e <HAL_TIM_PWM_ConfigChannel+0xca>
 800208e:	2a14      	cmp	r2, #20
 8002090:	d056      	beq.n	8002140 <HAL_TIM_PWM_ConfigChannel+0xec>
 8002092:	2a0c      	cmp	r2, #12
 8002094:	d1f2      	bne.n	800207c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002096:	6820      	ldr	r0, [r4, #0]
 8002098:	f7ff fd34 	bl	8001b04 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800209c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800209e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020b6:	e030      	b.n	800211a <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020b8:	6820      	ldr	r0, [r4, #0]
 80020ba:	f7ff fc35 	bl	8001928 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020c0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	f042 0208 	orr.w	r2, r2, #8
 80020c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	f022 0204 	bic.w	r2, r2, #4
 80020d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020d6:	619a      	str	r2, [r3, #24]
    break;
 80020d8:	e7d0      	b.n	800207c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	f7ff fc78 	bl	80019d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020e0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020e2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020fa:	e7ec      	b.n	80020d6 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	f7ff fcb5 	bl	8001a6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002102:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002104:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	f042 0208 	orr.w	r2, r2, #8
 800210c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	f022 0204 	bic.w	r2, r2, #4
 8002114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800211a:	61da      	str	r2, [r3, #28]
    break;
 800211c:	e7ae      	b.n	800207c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800211e:	6820      	ldr	r0, [r4, #0]
 8002120:	f7ff ff28 	bl	8001f74 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002124:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002126:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800212a:	f042 0208 	orr.w	r2, r2, #8
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800213a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800213e:	e79d      	b.n	800207c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	f7ff ff4f 	bl	8001fe4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002146:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002148:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800214a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800214c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002152:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800215a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002160:	e7ec      	b.n	800213c <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08002164 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002164:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
{
 800216a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800216c:	d020      	beq.n	80021b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 800216e:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002170:	4d10      	ldr	r5, [pc, #64]	; (80021b4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8002172:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002174:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002176:	42aa      	cmp	r2, r5
 8002178:	d007      	beq.n	800218a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800217a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800217e:	42aa      	cmp	r2, r5
 8002180:	d003      	beq.n	800218a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002182:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002186:	42aa      	cmp	r2, r5
 8002188:	d103      	bne.n	8002192 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800218a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800218c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002190:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002192:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002194:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800219a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800219c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80021a0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021a2:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80021a4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80021a6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80021a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80021b0:	2002      	movs	r0, #2
} 
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	40012c00 	.word	0x40012c00

080021b8 <HAL_TIMEx_CommutationCallback>:
 80021b8:	4770      	bx	lr

080021ba <HAL_TIMEx_BreakCallback>:
 80021ba:	4770      	bx	lr

080021bc <HAL_TIMEx_Break2Callback>:
{
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_TIM_IC_CaptureCallback>:
				cnt1=0;
			}
		}
	}
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80021c0:	b508      	push	{r3, lr}
	if (htim->Instance==TIM2){
 80021c2:	6803      	ldr	r3, [r0, #0]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d11c      	bne.n	8002204 <HAL_TIM_IC_CaptureCallback+0x44>
		if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1)
 80021ca:	2102      	movs	r1, #2
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d0:	f7fe fd70 	bl	8000cb4 <HAL_GPIO_ReadPin>
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x48>)
 80021d6:	2801      	cmp	r0, #1
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80021d8:	681b      	ldr	r3, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==1)
 80021da:	d102      	bne.n	80021e2 <HAL_TIM_IC_CaptureCallback+0x22>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
 80021e0:	bd08      	pop	{r3, pc}
		else{
			T=__HAL_TIM_GET_COUNTER(&htim2);
 80021e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_TIM_IC_CaptureCallback+0x4c>)
 80021e6:	6018      	str	r0, [r3, #0]
			distance=T/(double)58;
 80021e8:	f7fe f946 	bl	8000478 <__aeabi_i2d>
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x50>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	f7fe fad2 	bl	8000798 <__aeabi_ddiv>
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x54>)
 80021f6:	e9c3 0100 	strd	r0, r1, [r3]
			HAL_TIM_Base_Start_IT(&htim1);
 80021fa:	4807      	ldr	r0, [pc, #28]	; (8002218 <HAL_TIM_IC_CaptureCallback+0x58>)
		}
	}
}
 80021fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_TIM_Base_Start_IT(&htim1);
 8002200:	f7ff ba1a 	b.w	8001638 <HAL_TIM_Base_Start_IT>
 8002204:	bd08      	pop	{r3, pc}
 8002206:	bf00      	nop
 8002208:	200000fc 	.word	0x200000fc
 800220c:	2000002c 	.word	0x2000002c
 8002210:	404d0000 	.word	0x404d0000
 8002214:	20000030 	.word	0x20000030
 8002218:	200000bc 	.word	0x200000bc

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b510      	push	{r4, lr}
 800221e:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002220:	2302      	movs	r3, #2
 8002222:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002224:	2301      	movs	r3, #1
 8002226:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002228:	2310      	movs	r3, #16
 800222a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800222e:	2300      	movs	r3, #0
 8002230:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002232:	f7fe fd4b 	bl	8000ccc <HAL_RCC_OscConfig>
 8002236:	4601      	mov	r1, r0
 8002238:	b100      	cbz	r0, 800223c <SystemClock_Config+0x20>
 800223a:	e7fe      	b.n	800223a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800223e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002240:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002242:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002244:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002246:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800224a:	f7fe ffe9 	bl	8001220 <HAL_RCC_ClockConfig>
 800224e:	b100      	cbz	r0, 8002252 <SystemClock_Config+0x36>
 8002250:	e7fe      	b.n	8002250 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <SystemClock_Config+0x74>)
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002254:	901d      	str	r0, [sp, #116]	; 0x74
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002256:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002258:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225a:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2
 800225c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225e:	f7ff f8a7 	bl	80013b0 <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4604      	mov	r4, r0
 8002264:	b100      	cbz	r0, 8002268 <SystemClock_Config+0x4c>
 8002266:	e7fe      	b.n	8002266 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002268:	f7ff f89c 	bl	80013a4 <HAL_RCC_GetHCLKFreq>
 800226c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002270:	fbb0 f0f3 	udiv	r0, r0, r3
 8002274:	f7fe fc26 	bl	8000ac4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002278:	2004      	movs	r0, #4
 800227a:	f7fe fc39 	bl	8000af0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800227e:	4622      	mov	r2, r4
 8002280:	4621      	mov	r1, r4
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	f7fe fbdd 	bl	8000a44 <HAL_NVIC_SetPriority>
}
 800228a:	b026      	add	sp, #152	; 0x98
 800228c:	bd10      	pop	{r4, pc}
 800228e:	bf00      	nop
 8002290:	00301000 	.word	0x00301000

08002294 <main>:
{
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002298:	f7fe fb8a 	bl	80009b0 <HAL_Init>
  SystemClock_Config();
 800229c:	f7ff ffbe 	bl	800221c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	4b96      	ldr	r3, [pc, #600]	; (80024fc <main+0x268>)
  htim2.Instance = TIM2;
 80022a2:	4c97      	ldr	r4, [pc, #604]	; (8002500 <main+0x26c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022aa:	615a      	str	r2, [r3, #20]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022bc:	615a      	str	r2, [r3, #20]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80022c4:	9202      	str	r2, [sp, #8]
 80022c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022ce:	615a      	str	r2, [r3, #20]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d6:	9303      	str	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80022d8:	2200      	movs	r2, #0
 80022da:	2112      	movs	r1, #18
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80022e2:	f7fe fced 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2141      	movs	r1, #65	; 0x41
 80022ea:	4886      	ldr	r0, [pc, #536]	; (8002504 <main+0x270>)
 80022ec:	f7fe fce8 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	4884      	ldr	r0, [pc, #528]	; (8002508 <main+0x274>)
 80022f6:	f7fe fce3 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80022fc:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fe:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	a907      	add	r1, sp, #28
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8002306:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f7fe fc01 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8002312:	2341      	movs	r3, #65	; 0x41
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	a907      	add	r1, sp, #28
 8002316:	487b      	ldr	r0, [pc, #492]	; (8002504 <main+0x270>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8002318:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f7fe fbf8 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002324:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002326:	4878      	ldr	r0, [pc, #480]	; (8002508 <main+0x274>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002328:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	950a      	str	r5, [sp, #40]	; 0x28
  htim2.Init.Prescaler = 7;
 8002332:	2607      	movs	r6, #7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002334:	f7fe fbee 	bl	8000b14 <HAL_GPIO_Init>
  htim2.Init.Prescaler = 7;
 8002338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233c:	e884 0048 	stmia.w	r4, {r3, r6}
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002340:	4620      	mov	r0, r4
  htim2.Init.Period = 0xffffffff;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 0xffffffff;
 8002348:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234a:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800234e:	f7ff fad1 	bl	80018f4 <HAL_TIM_IC_Init>
 8002352:	b100      	cbz	r0, 8002356 <main+0xc2>
 8002354:	e7fe      	b.n	8002354 <main+0xc0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002358:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800235a:	a904      	add	r1, sp, #16
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff ff01 	bl	8002164 <HAL_TIMEx_MasterConfigSynchronization>
 8002362:	4602      	mov	r2, r0
 8002364:	b100      	cbz	r0, 8002368 <main+0xd4>
 8002366:	e7fe      	b.n	8002366 <main+0xd2>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002368:	250a      	movs	r5, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800236a:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 800236c:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800236e:	a907      	add	r1, sp, #28
 8002370:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002372:	9507      	str	r5, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002374:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002376:	f7ff fc33 	bl	8001be0 <HAL_TIM_IC_ConfigChannel>
 800237a:	b100      	cbz	r0, 800237e <main+0xea>
 800237c:	e7fe      	b.n	800237c <main+0xe8>
  htim1.Instance = TIM1;
 800237e:	4c63      	ldr	r4, [pc, #396]	; (800250c <main+0x278>)
 8002380:	4b63      	ldr	r3, [pc, #396]	; (8002510 <main+0x27c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002382:	60a0      	str	r0, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002386:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002388:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800238a:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 7;
 800238c:	e884 0048 	stmia.w	r4, {r3, r6}
  htim1.Init.Period = 10;
 8002390:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002392:	f7ff fa7b 	bl	800188c <HAL_TIM_Base_Init>
 8002396:	b100      	cbz	r0, 800239a <main+0x106>
 8002398:	e7fe      	b.n	8002398 <main+0x104>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800239e:	a907      	add	r1, sp, #28
 80023a0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a2:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023a4:	f7ff fcae 	bl	8001d04 <HAL_TIM_ConfigClockSource>
 80023a8:	b100      	cbz	r0, 80023ac <main+0x118>
 80023aa:	e7fe      	b.n	80023aa <main+0x116>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ac:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023ae:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023b2:	a904      	add	r1, sp, #16
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff fed5 	bl	8002164 <HAL_TIMEx_MasterConfigSynchronization>
 80023ba:	b100      	cbz	r0, 80023be <main+0x12a>
 80023bc:	e7fe      	b.n	80023bc <main+0x128>
  htim3.Instance = TIM3;
 80023be:	4c55      	ldr	r4, [pc, #340]	; (8002514 <main+0x280>)
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <main+0x284>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 7;
 80023c4:	e884 0048 	stmia.w	r4, {r3, r6}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	6120      	str	r0, [r4, #16]
  htim3.Init.Period = 100;
 80023ca:	2364      	movs	r3, #100	; 0x64
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023ce:	4620      	mov	r0, r4
  htim3.Init.Period = 100;
 80023d0:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023d2:	f7ff fa75 	bl	80018c0 <HAL_TIM_PWM_Init>
 80023d6:	b100      	cbz	r0, 80023da <main+0x146>
 80023d8:	e7fe      	b.n	80023d8 <main+0x144>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023de:	a904      	add	r1, sp, #16
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff febf 	bl	8002164 <HAL_TIMEx_MasterConfigSynchronization>
 80023e6:	4602      	mov	r2, r0
 80023e8:	b100      	cbz	r0, 80023ec <main+0x158>
 80023ea:	e7fe      	b.n	80023ea <main+0x156>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ec:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80023ee:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f0:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f2:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f4:	a907      	add	r1, sp, #28
 80023f6:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f8:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023fa:	f7ff fe2b 	bl	8002054 <HAL_TIM_PWM_ConfigChannel>
 80023fe:	4605      	mov	r5, r0
 8002400:	b100      	cbz	r0, 8002404 <main+0x170>
 8002402:	e7fe      	b.n	8002402 <main+0x16e>
  HAL_TIM_MspPostInit(&htim3);
 8002404:	4620      	mov	r0, r4
 8002406:	f000 f939 	bl	800267c <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 800240a:	4844      	ldr	r0, [pc, #272]	; (800251c <main+0x288>)
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <main+0x28c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	6085      	str	r5, [r0, #8]
  htim4.Init.Prescaler = 0;
 8002410:	e880 0028 	stmia.w	r0, {r3, r5}
  htim4.Init.Period = 0;
 8002414:	60c5      	str	r5, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	6105      	str	r5, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002418:	6185      	str	r5, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800241a:	f7ff fa51 	bl	80018c0 <HAL_TIM_PWM_Init>
 800241e:	b100      	cbz	r0, 8002422 <main+0x18e>
 8002420:	e7fe      	b.n	8002420 <main+0x18c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002422:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002424:	a904      	add	r1, sp, #16
 8002426:	483d      	ldr	r0, [pc, #244]	; (800251c <main+0x288>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242a:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800242c:	f7ff fe9a 	bl	8002164 <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	b100      	cbz	r0, 8002434 <main+0x1a0>
 8002432:	e7fe      	b.n	8002432 <main+0x19e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002434:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002436:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002438:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800243a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800243c:	220c      	movs	r2, #12
 800243e:	a907      	add	r1, sp, #28
 8002440:	4836      	ldr	r0, [pc, #216]	; (800251c <main+0x288>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002442:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002444:	f7ff fe06 	bl	8002054 <HAL_TIM_PWM_ConfigChannel>
 8002448:	4605      	mov	r5, r0
 800244a:	b100      	cbz	r0, 800244e <main+0x1ba>
 800244c:	e7fe      	b.n	800244c <main+0x1b8>
  HAL_TIM_MspPostInit(&htim4);
 800244e:	4833      	ldr	r0, [pc, #204]	; (800251c <main+0x288>)
  TIM3->CCR1=0;
 8002450:	4c31      	ldr	r4, [pc, #196]	; (8002518 <main+0x284>)
	  if (T>60){
 8002452:	4e34      	ldr	r6, [pc, #208]	; (8002524 <main+0x290>)
  HAL_TIM_MspPostInit(&htim4);
 8002454:	f000 f912 	bl	800267c <HAL_TIM_MspPostInit>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8002458:	4629      	mov	r1, r5
 800245a:	4829      	ldr	r0, [pc, #164]	; (8002500 <main+0x26c>)
 800245c:	f7ff fd5e 	bl	8001f1c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8002460:	482a      	ldr	r0, [pc, #168]	; (800250c <main+0x278>)
 8002462:	f7ff f8e9 	bl	8001638 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);	//right
 8002466:	4629      	mov	r1, r5
 8002468:	482a      	ldr	r0, [pc, #168]	; (8002514 <main+0x280>)
 800246a:	f7ff fd0d 	bl	8001e88 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_4);	//left
 800246e:	210c      	movs	r1, #12
 8002470:	482a      	ldr	r0, [pc, #168]	; (800251c <main+0x288>)
 8002472:	f7ff fd09 	bl	8001e88 <HAL_TIM_PWM_Start_IT>
  TIM4->CCR1=0;
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <main+0x28c>)
  TIM3->CCR1=0;
 8002478:	6365      	str	r5, [r4, #52]	; 0x34
  TIM4->CCR1=0;
 800247a:	635d      	str	r5, [r3, #52]	; 0x34
	  if (T>60){
 800247c:	6833      	ldr	r3, [r6, #0]
 800247e:	2b3c      	cmp	r3, #60	; 0x3c
 8002480:	dd19      	ble.n	80024b6 <main+0x222>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);	//1
 8002482:	2200      	movs	r2, #0
 8002484:	2110      	movs	r1, #16
 8002486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248a:	f7fe fc19 	bl	8000cc0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);	//2
 800248e:	2200      	movs	r2, #0
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	481d      	ldr	r0, [pc, #116]	; (8002508 <main+0x274>)
 8002494:	f7fe fc14 	bl	8000cc0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);	//1
 8002498:	2200      	movs	r2, #0
 800249a:	2140      	movs	r1, #64	; 0x40
 800249c:	4819      	ldr	r0, [pc, #100]	; (8002504 <main+0x270>)
 800249e:	f7fe fc0f 	bl	8000cc0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);	//2
 80024a2:	2200      	movs	r2, #0
 80024a4:	2101      	movs	r1, #1
 80024a6:	4817      	ldr	r0, [pc, #92]	; (8002504 <main+0x270>)
 80024a8:	f7fe fc0a 	bl	8000cc0 <HAL_GPIO_WritePin>
		  TIM4->CCR1=100;
 80024ac:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <main+0x28c>)
		  TIM3->CCR1=100;
 80024ae:	2364      	movs	r3, #100	; 0x64
 80024b0:	6363      	str	r3, [r4, #52]	; 0x34
		  TIM4->CCR1=100;
 80024b2:	6353      	str	r3, [r2, #52]	; 0x34
 80024b4:	e7e2      	b.n	800247c <main+0x1e8>
	  else if (T<45){
 80024b6:	2b2c      	cmp	r3, #44	; 0x2c
 80024b8:	dce0      	bgt.n	800247c <main+0x1e8>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);	//1
 80024ba:	2200      	movs	r2, #0
 80024bc:	2110      	movs	r1, #16
 80024be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c2:	f7fe fbfd 	bl	8000cc0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);	//2
 80024c6:	2201      	movs	r2, #1
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	480f      	ldr	r0, [pc, #60]	; (8002508 <main+0x274>)
			  TIM4->CCR1=x;
 80024cc:	4f14      	ldr	r7, [pc, #80]	; (8002520 <main+0x28c>)
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);	//2
 80024ce:	f7fe fbf7 	bl	8000cc0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);	//1
 80024d2:	2200      	movs	r2, #0
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <main+0x270>)
 80024d8:	f7fe fbf2 	bl	8000cc0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);	//2
 80024dc:	2201      	movs	r2, #1
 80024de:	4611      	mov	r1, r2
 80024e0:	4808      	ldr	r0, [pc, #32]	; (8002504 <main+0x270>)
 80024e2:	f7fe fbed 	bl	8000cc0 <HAL_GPIO_WritePin>
		  for (int x=100;x--;x>0){
 80024e6:	2564      	movs	r5, #100	; 0x64
 80024e8:	f115 35ff 	adds.w	r5, r5, #4294967295
 80024ec:	d3c6      	bcc.n	800247c <main+0x1e8>
			  TIM3->CCR1=x;
 80024ee:	6365      	str	r5, [r4, #52]	; 0x34
			  HAL_Delay(500);
 80024f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			  TIM4->CCR1=x;
 80024f4:	637d      	str	r5, [r7, #52]	; 0x34
			  HAL_Delay(500);
 80024f6:	f7fe fa7f 	bl	80009f8 <HAL_Delay>
 80024fa:	e7f5      	b.n	80024e8 <main+0x254>
 80024fc:	40021000 	.word	0x40021000
 8002500:	200000fc 	.word	0x200000fc
 8002504:	48000400 	.word	0x48000400
 8002508:	48000800 	.word	0x48000800
 800250c:	200000bc 	.word	0x200000bc
 8002510:	40012c00 	.word	0x40012c00
 8002514:	2000007c 	.word	0x2000007c
 8002518:	40000400 	.word	0x40000400
 800251c:	2000003c 	.word	0x2000003c
 8002520:	40000800 	.word	0x40000800
 8002524:	2000002c 	.word	0x2000002c

08002528 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_MspInit+0x78>)
{
 800252a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	619a      	str	r2, [r3, #24]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	f7fe fa6e 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002544:	2200      	movs	r2, #0
 8002546:	4611      	mov	r1, r2
 8002548:	f06f 000b 	mvn.w	r0, #11
 800254c:	f7fe fa7a 	bl	8000a44 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	4611      	mov	r1, r2
 8002554:	f06f 000a 	mvn.w	r0, #10
 8002558:	f7fe fa74 	bl	8000a44 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	4611      	mov	r1, r2
 8002560:	f06f 0009 	mvn.w	r0, #9
 8002564:	f7fe fa6e 	bl	8000a44 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	4611      	mov	r1, r2
 800256c:	f06f 0004 	mvn.w	r0, #4
 8002570:	f7fe fa68 	bl	8000a44 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	4611      	mov	r1, r2
 8002578:	f06f 0003 	mvn.w	r0, #3
 800257c:	f7fe fa62 	bl	8000a44 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	4611      	mov	r1, r2
 8002584:	f06f 0001 	mvn.w	r0, #1
 8002588:	f7fe fa5c 	bl	8000a44 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	4611      	mov	r1, r2
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f7fe fa56 	bl	8000a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002598:	b003      	add	sp, #12
 800259a:	f85d fb04 	ldr.w	pc, [sp], #4
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_TIM_Base_MspInit+0x38>)
 80025a8:	6802      	ldr	r2, [r0, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d112      	bne.n	80025d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ae:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80025b2:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ba:	619a      	str	r2, [r3, #24]
 80025bc:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80025c6:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80025ca:	f7fe fa3b 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025ce:	2019      	movs	r0, #25
 80025d0:	f7fe fa6c 	bl	8000aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025d4:	b003      	add	sp, #12
 80025d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80025da:	bf00      	nop
 80025dc:	40012c00 	.word	0x40012c00

080025e0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80025e0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM2)
 80025e2:	6803      	ldr	r3, [r0, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80025e8:	b086      	sub	sp, #24
  if(htim_ic->Instance==TIM2)
 80025ea:	d11f      	bne.n	800262c <HAL_TIM_IC_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2400      	movs	r4, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	9403      	str	r4, [sp, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2202      	movs	r2, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002606:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800260a:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	a901      	add	r1, sp, #4
 800260e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002612:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002614:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f7fe fa7c 	bl	8000b14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800261c:	201c      	movs	r0, #28
 800261e:	4622      	mov	r2, r4
 8002620:	4621      	mov	r1, r4
 8002622:	f7fe fa0f 	bl	8000a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002626:	201c      	movs	r0, #28
 8002628:	f7fe fa40 	bl	8000aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800262c:	b006      	add	sp, #24
 800262e:	bd10      	pop	{r4, pc}

08002630 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 8002630:	6803      	ldr	r3, [r0, #0]
 8002632:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <HAL_TIM_PWM_MspInit+0x40>)
 8002634:	4293      	cmp	r3, r2
{
 8002636:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8002638:	d10b      	bne.n	8002652 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_TIM_PWM_MspInit+0x44>)
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	f042 0202 	orr.w	r2, r2, #2
 8002642:	61da      	str	r2, [r3, #28]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800264e:	b002      	add	sp, #8
 8002650:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_TIM_PWM_MspInit+0x48>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d1fa      	bne.n	800264e <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_TIM_PWM_MspInit+0x44>)
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	f042 0204 	orr.w	r2, r2, #4
 8002660:	61da      	str	r2, [r3, #28]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	9b01      	ldr	r3, [sp, #4]
}
 800266c:	e7ef      	b.n	800264e <HAL_TIM_PWM_MspInit+0x1e>
 800266e:	bf00      	nop
 8002670:	40000400 	.word	0x40000400
 8002674:	40021000 	.word	0x40021000
 8002678:	40000800 	.word	0x40000800

0800267c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800267c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 800267e:	6803      	ldr	r3, [r0, #0]
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_TIM_MspPostInit+0x34>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE END TIM3_MspPostInit 0 */
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002686:	2310      	movs	r3, #16
    /**TIM4 GPIO Configuration    
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800268a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002698:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f7fe fa3b 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800269e:	b007      	add	sp, #28
 80026a0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_TIM_MspPostInit+0x3c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d1f9      	bne.n	800269e <HAL_TIM_MspPostInit+0x22>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ae:	e7eb      	b.n	8002688 <HAL_TIM_MspPostInit+0xc>
 80026b0:	40000400 	.word	0x40000400
 80026b4:	48000400 	.word	0x48000400
 80026b8:	40000800 	.word	0x40000800

080026bc <NMI_Handler>:
 80026bc:	4770      	bx	lr

080026be <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80026be:	e7fe      	b.n	80026be <HardFault_Handler>

080026c0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80026c0:	e7fe      	b.n	80026c0 <MemManage_Handler>

080026c2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80026c2:	e7fe      	b.n	80026c2 <BusFault_Handler>

080026c4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80026c4:	e7fe      	b.n	80026c4 <UsageFault_Handler>

080026c6 <SVC_Handler>:
 80026c6:	4770      	bx	lr

080026c8 <DebugMon_Handler>:
 80026c8:	4770      	bx	lr

080026ca <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80026ca:	4770      	bx	lr

080026cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80026cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ce:	f7fe f981 	bl	80009d4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80026d6:	f7fe ba18 	b.w	8000b0a <HAL_SYSTICK_IRQHandler>
	...

080026dc <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026dc:	4801      	ldr	r0, [pc, #4]	; (80026e4 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80026de:	f7fe bfba 	b.w	8001656 <HAL_TIM_IRQHandler>
 80026e2:	bf00      	nop
 80026e4:	200000bc 	.word	0x200000bc

080026e8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e8:	4801      	ldr	r0, [pc, #4]	; (80026f0 <TIM2_IRQHandler+0x8>)
 80026ea:	f7fe bfb4 	b.w	8001656 <HAL_TIM_IRQHandler>
 80026ee:	bf00      	nop
 80026f0:	200000fc 	.word	0x200000fc

080026f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f4:	4915      	ldr	r1, [pc, #84]	; (800274c <SystemInit+0x58>)
 80026f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <SystemInit+0x5c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800270c:	6858      	ldr	r0, [r3, #4]
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <SystemInit+0x60>)
 8002710:	4002      	ands	r2, r0
 8002712:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800271a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800271e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002726:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800272e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	f022 020f 	bic.w	r2, r2, #15
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002738:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <SystemInit+0x64>)
 800273c:	4002      	ands	r2, r0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002748:	608b      	str	r3, [r1, #8]
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00
 8002750:	40021000 	.word	0x40021000
 8002754:	f87fc00c 	.word	0xf87fc00c
 8002758:	ff00fccc 	.word	0xff00fccc

0800275c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800275c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002794 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002760:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002762:	e003      	b.n	800276c <LoopCopyDataInit>

08002764 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002766:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002768:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800276a:	3104      	adds	r1, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800276c:	480b      	ldr	r0, [pc, #44]	; (800279c <LoopForever+0xa>)
	ldr	r3, =_edata
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002770:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002772:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002774:	d3f6      	bcc.n	8002764 <CopyDataInit>
	ldr	r2, =_sbss
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002778:	e002      	b.n	8002780 <LoopFillZerobss>

0800277a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800277a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800277c:	f842 3b04 	str.w	r3, [r2], #4

08002780 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <LoopForever+0x16>)
	cmp	r2, r3
 8002782:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002784:	d3f9      	bcc.n	800277a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002786:	f7ff ffb5 	bl	80026f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278a:	f000 f811 	bl	80027b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800278e:	f7ff fd81 	bl	8002294 <main>

08002792 <LoopForever>:

LoopForever:
    b LoopForever
 8002792:	e7fe      	b.n	8002792 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002794:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002798:	08002848 	.word	0x08002848
	ldr	r0, =_sdata
 800279c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027a0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80027a4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80027a8:	2000013c 	.word	0x2000013c

080027ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC1_2_IRQHandler>
	...

080027b0 <__libc_init_array>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	4e0d      	ldr	r6, [pc, #52]	; (80027e8 <__libc_init_array+0x38>)
 80027b4:	4c0d      	ldr	r4, [pc, #52]	; (80027ec <__libc_init_array+0x3c>)
 80027b6:	1ba4      	subs	r4, r4, r6
 80027b8:	10a4      	asrs	r4, r4, #2
 80027ba:	2500      	movs	r5, #0
 80027bc:	42a5      	cmp	r5, r4
 80027be:	d109      	bne.n	80027d4 <__libc_init_array+0x24>
 80027c0:	4e0b      	ldr	r6, [pc, #44]	; (80027f0 <__libc_init_array+0x40>)
 80027c2:	4c0c      	ldr	r4, [pc, #48]	; (80027f4 <__libc_init_array+0x44>)
 80027c4:	f000 f818 	bl	80027f8 <_init>
 80027c8:	1ba4      	subs	r4, r4, r6
 80027ca:	10a4      	asrs	r4, r4, #2
 80027cc:	2500      	movs	r5, #0
 80027ce:	42a5      	cmp	r5, r4
 80027d0:	d105      	bne.n	80027de <__libc_init_array+0x2e>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027d8:	4798      	blx	r3
 80027da:	3501      	adds	r5, #1
 80027dc:	e7ee      	b.n	80027bc <__libc_init_array+0xc>
 80027de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027e2:	4798      	blx	r3
 80027e4:	3501      	adds	r5, #1
 80027e6:	e7f2      	b.n	80027ce <__libc_init_array+0x1e>
 80027e8:	08002840 	.word	0x08002840
 80027ec:	08002840 	.word	0x08002840
 80027f0:	08002840 	.word	0x08002840
 80027f4:	08002844 	.word	0x08002844

080027f8 <_init>:
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	bf00      	nop
 80027fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fe:	bc08      	pop	{r3}
 8002800:	469e      	mov	lr, r3
 8002802:	4770      	bx	lr

08002804 <_fini>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	bf00      	nop
 8002808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280a:	bc08      	pop	{r3}
 800280c:	469e      	mov	lr, r3
 800280e:	4770      	bx	lr
